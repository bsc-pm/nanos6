#	This file is part of Nanos6 and is licensed under the terms contained in the COPYING file.
#
#	Copyright (C) 2015-2023 Barcelona Supercomputing Center (BSC)

# A workaround for http://debbugs.gnu.org/cgi/bugreport.cgi?bug=18744
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}

# The subdir of the embedded hwloc
if USE_HWLOC_EMBEDDED
HWLOC_EMBEDDED_SUBDIR_COND = $(HWLOC_EMBEDDED_SUBDIR)
endif

# Note: do not use HWLOC_EMBEDDED_SUBDIR here, since it is not defined yet
ACLOCAL_AMFLAGS = -I m4 -I deps/hwloc/config

AM_CFLAGS = -I$(srcdir)/api -I$(srcdir)/loader -I.
AM_CXXFLAGS = -I$(srcdir)/src -I$(builddir)/src -I$(srcdir)/api -I.
AM_LDFLAGS = $(AS_NEEDED_FLAGS)
AM_CXXFLAGS += $(FALIGNED_NEW_FLAG)

# Add the embedded hwloc (if necessary) into SUBDIRS, but not in DIST_SUBDIRS. Adding it
# would enable the distributable rules of hwloc and generate its own tarball. Instead, it
# is distributed as a regular directory by adding it to EXTRA_DIST
SUBDIRS = $(HWLOC_EMBEDDED_SUBDIR_COND) . commands tests/directive_based/clang tests/directive_based/mercurium scripts
DIST_SUBDIRS = . commands tests/directive_based/clang tests/directive_based/mercurium scripts


# See info page of libtool "Updating version info"
# https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
lib_current = 0
lib_revision = 0
lib_age = 0

# Expected shared object numbers
lib_major = $(shell expr $(lib_current) - $(lib_age))
lib_suffix = $(lib_major).$(lib_age).$(lib_revision)


MAX_REGION_DIMENSIONS = 8
MULTIDIMENSIONAL_REGION_API_TYPES = read write readwrite weak_read weak_write weak_readwrite concurrent commutative weak_commutative reduction weak_reduction
SUPPORTED_MULTIDIMENSIONAL_REGION_API_TYPES =

LINT_MAX_REGION_DIMENSIONS = 8
LINT_MULTIDIMENSIONAL_REGION_API_TYPES = read write readwrite

nanos6includedir = $(includedir)/nanos6

nanos6include_HEADERS = \
	api/nanos6/api-check.h \
	api/nanos6/blocking.h \
	api/nanos6/bootstrap.h \
	api/nanos6/cluster.h \
	api/nanos6/config.h \
	api/nanos6/constants.h \
	api/nanos6/cuda_device.h \
	api/nanos6/debug.h \
	api/nanos6/devices.h \
	api/nanos6/events.h \
	api/nanos6/final.h \
	api/nanos6/instrument.h \
	api/nanos6/library-mode.h \
	api/nanos6/lint.h \
	api/nanos6/major.h \
	api/nanos6/monitoring.h \
	api/nanos6/numa.h \
	api/nanos6/openacc_device.h \
	api/nanos6/polling.h \
	api/nanos6/reductions.h \
	api/nanos6/runtime-info.h \
	api/nanos6/task-info-registration.h \
	api/nanos6/task-instantiation.h \
	api/nanos6/loop.h \
	api/nanos6/taskwait.h \
	api/nanos6/user-mutex.h \
	api/nanos6/version.h

nodist_nanos6include_HEADERS = \
	nanos6/multidimensional-dependencies.h \
	nanos6/multidimensional-release.h \
	nanos6/lint-multidimensional-accesses.h

include_HEADERS = \
	api/nanos6.h


lib_LTLIBRARIES = \
	libnanos6.la \
	libnanos6-debug-discrete.la \
	libnanos6-debug-regions.la \
	libnanos6-debug-discrete-ctf.la \
	libnanos6-debug-regions-ctf.la \
	libnanos6-debug-discrete-extrae.la \
	libnanos6-debug-regions-extrae.la \
	libnanos6-debug-regions-graph.la \
	libnanos6-debug-discrete-lint.la \
	libnanos6-debug-regions-lint.la \
	libnanos6-debug-discrete-ovni.la \
	libnanos6-debug-regions-ovni.la \
	libnanos6-debug-discrete-stats.la \
	libnanos6-debug-regions-stats.la \
	libnanos6-debug-discrete-verbose.la \
	libnanos6-debug-regions-verbose.la \
	libnanos6-optimized-discrete.la \
	libnanos6-optimized-regions.la \
	libnanos6-optimized-discrete-ctf.la \
	libnanos6-optimized-regions-ctf.la \
	libnanos6-optimized-discrete-extrae.la \
	libnanos6-optimized-regions-extrae.la \
	libnanos6-optimized-regions-graph.la \
	libnanos6-optimized-discrete-lint.la \
	libnanos6-optimized-regions-lint.la \
	libnanos6-optimized-discrete-ovni.la \
	libnanos6-optimized-regions-ovni.la \
	libnanos6-optimized-discrete-stats.la \
	libnanos6-optimized-regions-stats.la \
	libnanos6-optimized-discrete-verbose.la \
	libnanos6-optimized-regions-verbose.la

noinst_LTLIBRARIES = libnanos6-main-wrapper.la libnanos6-library-mode.la
lib_OBJECTS = nanos6-main-wrapper.o nanos6-library-mode.o


AM_V_LD = $(am__v_LD_@AM_V@)
am__v_LD_ = $(am__v_LD_@AM_DEFAULT_V@)
am__v_LD_0 = @echo "  LD      " $@;
am__v_LD_1 =


#
# Taskification of the "main" function
#
main_interception =
if LINUX_POWERPC_GLIBC
main_interception += loader/intercept-main-glibc-powerpc.c
endif
if LINUX_GLIBC
main_interception += loader/intercept-main-glibc.c
endif
if ANDROID
main_interception += loader/intercept-main-android.c
endif

libnanos6_main_wrapper_la_SOURCES = \
	$(main_interception) \
	loader/api-versions.c \
	loader/api-versions.h \
	loader/device_strings.c \
	loader/error.h \
	loader/intercept-main-common.c \
	loader/intercept-main-common.h \
	loader/main-wrapper.c \
	loader/main-wrapper.h

libnanos6_main_wrapper_la_CPPFLAGS = $(CUDA_CFLAGS) $(MPI_CXXFLAGS) $(MCMODEL_FLAGS)
libnanos6_main_wrapper_la_LDFLAGS = -static


nanos6-main-wrapper.o: libnanos6-main-wrapper.la
	$(AM_V_LD)$(LD) -r --whole-archive $(top_builddir)/.libs/libnanos6-main-wrapper.a -o nanos6-main-wrapper.o


libnanos6_library_mode_la_SOURCES = \
	$(library_interception) \
	loader/api-versions.c \
	loader/api-versions.h \
	loader/device_strings.c \
	loader/library-mode-init.c

libnanos6_library_mode_la_CPPFLAGS = $(CUDA_CFLAGS) $(MPI_CXXFLAGS) $(MCMODEL_FLAGS)
libnanos6_library_mode_la_LDFLAGS = -static


nanos6-library-mode.o: libnanos6-library-mode.la
	$(AM_V_LD)$(LD) -r --whole-archive $(top_builddir)/.libs/libnanos6-library-mode.a -o nanos6-library-mode.o


#
# Loader and symbol resolution
#
symbol_resolution =
symbol_resolution_header =
multidimensional_regions =

if RESOLVE_SYMBOLS_USING_IFUNC
symbol_resolution_header += loader/symbol-resolver/resolve.h
symbol_resolution += \
	loader/symbol-resolver/api-check.c \
	loader/symbol-resolver/blocking.c \
	loader/symbol-resolver/bootstrap.c \
	loader/symbol-resolver/cluster.c \
	loader/symbol-resolver/config.c \
	loader/symbol-resolver/cpu-control.c \
	loader/symbol-resolver/debugging.c \
	loader/symbol-resolver/dependencies.c \
	loader/symbol-resolver/events.c \
	loader/symbol-resolver/final.c \
	loader/symbol-resolver/instrument.c \
	loader/symbol-resolver/lint.c \
	loader/symbol-resolver/monitoring.c \
	loader/symbol-resolver/numa.c \
	loader/symbol-resolver/polling.c \
	loader/symbol-resolver/runtime-info.c \
	loader/symbol-resolver/task-info-registration.c \
	loader/symbol-resolver/task-instantiation.c \
	loader/symbol-resolver/loop.c \
	loader/symbol-resolver/taskwait.c \
	loader/symbol-resolver/user-mutex.c \
	loader/symbol-resolver/version.c \
	loader/symbol-resolver/weak-dependencies.c

if USE_CUDA
symbol_resolution += loader/symbol-resolver/cuda-device-api.c
endif

multidimensional_regions += \
	multidim-region-dependency-resolvers.c \
	multidim-release-resolvers.c \
	lint-multidim-region-access-resolvers.c
endif


if RESOLVE_SYMBOLS_USING_INDIRECTION
symbol_resolution_header += loader/indirect-symbols/resolve.h
symbol_resolution += \
	loader/indirect-symbols/api-check.c \
	loader/indirect-symbols/blocking.c \
	loader/indirect-symbols/bootstrap.c \
	loader/indirect-symbols/cluster.c \
	loader/indirect-symbols/config.c \
	loader/indirect-symbols/cpu-control.c \
	loader/indirect-symbols/debugging.c \
	loader/indirect-symbols/dependencies.c \
	loader/indirect-symbols/events.c \
	loader/indirect-symbols/final.c \
	loader/indirect-symbols/instrument.c \
	loader/indirect-symbols/lint.c \
	loader/indirect-symbols/monitoring.c \
	loader/indirect-symbols/numa.c \
	loader/indirect-symbols/polling.c \
	loader/indirect-symbols/runtime-info.c \
	loader/indirect-symbols/task-info-registration.c \
	loader/indirect-symbols/task-instantiation.c \
	loader/indirect-symbols/loop.c \
	loader/indirect-symbols/taskwait.c \
	loader/indirect-symbols/user-mutex.c \
	loader/indirect-symbols/version.c \
	loader/indirect-symbols/weak-dependencies.c

if USE_CUDA
symbol_resolution += loader/indirect-symbols/cuda-device-api.c
endif

multidimensional_regions += \
	multidim-region-dependency-indirect-resolvers.c \
	multidim-release-indirect-resolvers.c \
	lint-multidim-region-access-indirect-resolvers.c

dependent_objects = $(symbol_resolution:.c=.lo) $(multidimensional_regions:.c=.lo)
$(dependent_objects): \
	nanos6/multidimensional-dependencies.h \
	nanos6/lint-multidimensional-accesses.h
endif

libnanos6_la_SOURCES = \
	$(symbol_resolution_header) \
	$(symbol_resolution) \
	loader/config-parser.c \
	loader/config-parser.h \
	loader/error.h \
	loader/loader.c \
	loader/loader.h \
	loader/support/toml/toml.c \
	loader/support/toml/toml.h

libnanos6_la_CPPFLAGS = -DSONAME_MAJOR=\"$(lib_major)\" -DSONAME_SUFFIX=\"$(lib_suffix)\" -DINSTALLED_CONFIG_DIR=\"$(docdir)\" $(jemalloc_CPPFLAGS) $(CUDA_CFLAGS) $(MPI_CXXFLAGS)
libnanos6_la_LDFLAGS = $(jemalloc_LIBS) $(AM_LDFLAGS) $(PTHREAD_CFLAGS) $(PTHREAD_LIBS) $(DLOPEN_LIBS) $(LDFLAGS_NOUNDEFINED)


nanos6_generated_headers = \
	nanos6/multidimensional-dependencies.h \
	nanos6/multidimensional-release.h \
	nanos6/lint-multidimensional-accesses.h

nodist_libnanos6_la_SOURCES = \
	$(nanos6_generated_headers) \
	$(multidimensional_regions)
CLEANFILES = $(nodist_libnanos6_la_SOURCES)

BUILT_SOURCES = \
	$(nanos6_generated_headers)


#
# Automatically generated API headers
#
EXTRA_DIST = \
	loader/scripts/common.sh \
	loader/scripts/generate_multidim_functions_for_linear_regions.sh \
	loader/scripts/generate_regions_indirect_symbol_resolvers.sh \
	loader/scripts/generate_regions_prototypes.sh \
	loader/scripts/generate_regions_symbol_resolvers.sh \
	loader/scripts/generate_release_indirect_symbol_resolvers.sh \
	loader/scripts/generate_release_prototypes.sh \
	loader/scripts/generate_release_symbol_resolvers.sh \
	loader/scripts/lint/common.sh \
	loader/scripts/lint/generate_multidim_functions_for_linear_regions.sh \
	loader/scripts/lint/generate_regions_indirect_symbol_resolvers.sh \
	loader/scripts/lint/generate_regions_prototypes.sh \
	loader/scripts/lint/generate_regions_symbol_resolvers.sh


AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 =

AM_V_GEN2 = $(am__v_GEN2_@AM_V@)
am__v_GEN2_ = $(am__v_GEN2_@AM_DEFAULT_V@)
am__v_GEN2_0 = @echo "  GEN2    " $@;
am__v_GEN2_1 =

AM_V_GEN3 = $(am__v_GEN3_@AM_V@)
am__v_GEN3_ = $(am__v_GEN3_@AM_DEFAULT_V@)
am__v_GEN3_0 = @echo "  GEN3    " $@;
am__v_GEN3_1 =

nanos6/multidimensional-dependencies.h: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_regions_prototypes.sh Makefile
	$(AM_V_GEN)mkdir -p nanos6 ; \
	$(top_srcdir)/loader/scripts/generate_regions_prototypes.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@

multidim-region-dependency-resolvers.c: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_regions_symbol_resolvers.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_regions_symbol_resolvers.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@

multidim-region-dependency-indirect-resolvers.c: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_regions_indirect_symbol_resolvers.sh Makefile nanos6/multidimensional-dependencies.h
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_regions_indirect_symbol_resolvers.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@

nanos6/multidimensional-release.h: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_release_prototypes.sh Makefile
	$(AM_V_GEN)mkdir -p nanos6 ; \
	$(top_srcdir)/loader/scripts/generate_release_prototypes.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@

multidim-release-resolvers.c: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_release_symbol_resolvers.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_release_symbol_resolvers.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@

multidim-release-indirect-resolvers.c: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_release_indirect_symbol_resolvers.sh Makefile nanos6/multidimensional-release.h
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_release_indirect_symbol_resolvers.sh $(MAX_REGION_DIMENSIONS) $(MULTIDIMENSIONAL_REGION_API_TYPES) > $@


MultidimensionalAPIToLinear.cpp: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_multidim_functions_for_linear_regions.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_multidim_functions_for_linear_regions.sh $(MAX_REGION_DIMENSIONS) $(SUPPORTED_MULTIDIMENSIONAL_REGION_API_TYPES) > $@

MultidimensionalAPIToDiscrete.cpp: $(top_srcdir)/loader/scripts/common.sh $(top_srcdir)/loader/scripts/generate_multidim_functions_for_linear_regions.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/generate_multidim_functions_for_linear_regions.sh $(MAX_REGION_DIMENSIONS) $(SUPPORTED_MULTIDIMENSIONAL_REGION_API_TYPES) > $@

nanos6/lint-multidimensional-accesses.h: $(top_srcdir)/loader/scripts/lint/common.sh $(top_srcdir)/loader/scripts/lint/generate_regions_prototypes.sh Makefile
	$(AM_V_GEN)mkdir -p nanos6 ; \
	$(top_srcdir)/loader/scripts/lint/generate_regions_prototypes.sh $(LINT_MAX_REGION_DIMENSIONS) $(LINT_MULTIDIMENSIONAL_REGION_API_TYPES) > $@

lint-multidim-region-access-resolvers.c: $(top_srcdir)/loader/scripts/lint/common.sh $(top_srcdir)/loader/scripts/lint/generate_regions_symbol_resolvers.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/lint/generate_regions_symbol_resolvers.sh $(LINT_MAX_REGION_DIMENSIONS) $(LINT_MULTIDIMENSIONAL_REGION_API_TYPES) > $@

lint-multidim-region-access-indirect-resolvers.c: $(top_srcdir)/loader/scripts/lint/common.sh $(top_srcdir)/loader/scripts/lint/generate_regions_indirect_symbol_resolvers.sh Makefile nanos6/lint-multidimensional-accesses.h
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/lint/generate_regions_indirect_symbol_resolvers.sh $(LINT_MAX_REGION_DIMENSIONS) $(LINT_MULTIDIMENSIONAL_REGION_API_TYPES) > $@

MultidimensionalLintAPI.cpp: $(top_srcdir)/loader/scripts/lint/common.sh $(top_srcdir)/loader/scripts/lint/generate_multidim_functions_for_linear_regions.sh Makefile
	$(AM_V_GEN)$(top_srcdir)/loader/scripts/lint/generate_multidim_functions_for_linear_regions.sh $(LINT_MAX_REGION_DIMENSIONS) $(LINT_MULTIDIMENSIONAL_REGION_API_TYPES) > $@


# Sources for debugging
universal_debug_sources = \
	src/lowlevel/FatalErrorHandler.cpp \
	src/system/RuntimeInfo.cpp \
	src/system/RuntimeInfoAPI.cpp \
	src/system/debug/RuntimeVersionAPI.cpp \
	src/version/CodeVersionInfo.cpp

nodist_universal_debug_sources = \
	src/version/CompilerVersionInfo.cpp


CLEANFILES += $(nodist_universal_debug_sources)
BUILT_SOURCES += $(nodist_universal_debug_sources)


nodist_common_sources = \
	$(nanos6_generated_headers)

common_sources = \
	src/dependencies/DataTrackingSupport.cpp \
	src/executors/threads/CPU.cpp \
	src/executors/threads/CPUManager.cpp \
	src/executors/threads/CPUManagerInterface.cpp \
	src/executors/threads/ThreadManager.cpp \
	src/executors/threads/WorkerThread.cpp \
	src/executors/threads/cpu-managers/default/DefaultCPUManager.cpp \
	src/executors/threads/cpu-managers/default/policies/IdlePolicy.cpp \
	src/hardware/HardwareInfo.cpp \
	src/hardware/device/Accelerator.cpp \
	src/hardware/hwinfo/HostInfo.cpp \
	src/hardware/places/ComputePlace.cpp \
	src/hardware/places/NUMAPlace.cpp \
	src/hardware-counters/HardwareCounters.cpp \
	src/hardware-counters/ThreadHardwareCounters.cpp \
	src/hardware-counters/rapl/RAPLHardwareCounters.cpp \
	src/lowlevel/BoostAssertionFailureHandler.cpp \
	src/lowlevel/threads/ExternalThread.cpp \
	src/lowlevel/threads/ExternalThreadGroup.cpp \
	src/lowlevel/threads/KernelLevelThread.cpp \
	src/memory/directory/Directory.cpp \
	src/memory/directory/HomeNodeMap.cpp \
	src/memory/numa/NUMAManager.cpp \
	src/monitoring/Monitoring.cpp \
	src/monitoring/TaskMonitor.cpp \
	src/monitoring/Tasktype.cpp \
	src/monitoring/TasktypeStatistics.cpp \
	src/scheduling/Scheduler.cpp \
	src/scheduling/SchedulerGenerator.cpp \
	src/scheduling/SchedulerInterface.cpp \
	src/scheduling/schedulers/HostUnsyncScheduler.cpp \
	src/scheduling/schedulers/SyncScheduler.cpp \
	src/scheduling/schedulers/UnsyncScheduler.cpp \
	src/scheduling/schedulers/device/DeviceUnsyncScheduler.cpp \
	src/support/GlobalLock.cpp \
	src/support/config/ConfigCentral.cpp \
	src/support/config/ConfigChecker.cpp \
	src/support/config/ConfigParser.cpp \
	src/support/config/ConfigVariable.cpp \
	src/system/APICheck.cpp \
	src/system/BlockingAPI.cpp \
	src/system/Bootstrap.cpp \
	src/system/ClusterAPI.cpp \
	src/system/ConfigAPI.cpp \
	src/system/EventsAPI.cpp \
	src/system/InstrumentAPI.cpp \
	src/system/LeaderThread.cpp \
	src/system/LintAPI.cpp \
	src/system/MonitoringAPI.cpp \
	src/system/NumaAPI.cpp \
	src/system/PollingAPI.cpp \
	src/system/RuntimeInfoEssentials.cpp \
	src/system/TaskInfoAPI.cpp \
	src/system/Throttle.cpp \
	src/system/TrackingPoints.cpp \
	src/system/debug/DebugAPI.cpp \
	src/system/ompss/AddTask.cpp \
	src/system/ompss/Loop.cpp \
	src/system/ompss/Query.cpp \
	src/system/ompss/SpawnFunction.cpp \
	src/system/ompss/TaskWait.cpp \
	src/system/ompss/UserMutex.cpp \
	src/tasks/StreamManager.cpp \
	src/tasks/Task.cpp \
	src/tasks/TaskInfoManager.cpp \
	src/tasks/Taskloop.cpp \
	src/version/VersionAPI.cpp

common_sources += $(universal_debug_sources)
nodist_common_sources += $(nodist_universal_debug_sources)

cuda_sources =

if USE_CUDA
cuda_sources += \
	src/hardware/device/cuda/CUDAAccelerator.cpp \
	src/hardware/device/cuda/CUDARuntimeLoader.cpp \
	src/system/CUDADeviceAPI.cpp
endif

common_sources += $(cuda_sources)

openacc_sources =

if USE_OPENACC
openacc_sources += \
	src/hardware/device/openacc/OpenAccAccelerator.cpp
endif

common_sources += $(openacc_sources)

regions_dependency_sources = \
	src/dependencies/linear-regions-fragmented/DataAccessRegistration.cpp \
	src/dependencies/linear-regions-fragmented/CommutativeScoreboard.cpp \
	src/dependencies/linear-regions-fragmented/ReductionInfo.cpp \
	src/dependencies/linear-regions-fragmented/RegisterDependencies.cpp \
	src/dependencies/linear-regions-fragmented/ReleaseDirective.cpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccesses.cpp

multidimensional_adaptor_sources = MultidimensionalLintAPI.cpp

discrete_dependency_sources = \
	src/dependencies/discrete/CommutativeSemaphore.cpp \
	src/dependencies/discrete/CPUDependencyData.cpp \
	src/dependencies/discrete/DataAccess.cpp \
	src/dependencies/discrete/DataAccessRegistration.cpp \
	src/dependencies/discrete/devices/HostReductionStorage.cpp \
	src/dependencies/discrete/ReductionInfo.cpp \
	src/dependencies/discrete/RegisterDependencies.cpp \
	src/dependencies/discrete/ReleaseDirective.cpp \
	src/dependencies/discrete/TaskDataAccesses.cpp

if USE_CUDA
discrete_dependency_sources += src/dependencies/discrete/devices/CUDAReductionStorage.cpp
endif

multidimensional_adaptor_sources += MultidimensionalAPIToLinear.cpp

regions_dependency_flags = -I$(srcdir)/src/dependencies/linear-regions -I$(srcdir)/src/dependencies/linear-regions-fragmented
discrete_dependency_flags = -I$(srcdir)/src/dependencies/linear-regions -I$(srcdir)/src/dependencies/discrete -DDISCRETE_DEPS

dist_dependency_sources = $(regions_dependency_sources) $(discrete_dependency_sources)

SUPPORTED_MULTIDIMENSIONAL_REGION_API_TYPES += read write readwrite weak_read weak_write weak_readwrite concurrent commutative weak_commutative reduction weak_reduction

introspection_sources = \
	src/instrument/support/introspection/CodeAddressInfoBase.cpp \
	src/instrument/support/introspection/DL/DLCodeAddressInfo.cpp
introspection_cppflags =

if HAVE_ELFUTILS
introspection_sources += \
	src/instrument/support/introspection/ElfUtils/ElfUtilsCodeAddressInfo.cpp
introspection_cppflags += -I$(srcdir)/src/instrument/support/introspection/ElfUtils
else
introspection_sources += \
	src/instrument/support/introspection/Addr2Line/Addr2LineCodeAddressInfo.cpp
introspection_cppflags += -I$(srcdir)/src/instrument/support/introspection/Addr2Line
endif

if HAVE_LIBUNWIND
introspection_cppflags += -I$(srcdir)/src/instrument/support/backtrace/libunwind
else
if HAVE_BACKTRACE
introspection_cppflags += -I$(srcdir)/src/instrument/support/backtrace/backtrace
else
introspection_cppflags += -I$(srcdir)/src/instrument/support/backtrace/unsupported
endif
endif


AM_CXXFLAGS += -I$(srcdir)/src/executors/threads/kernel-level
common_sources += \
	src/executors/threads/kernel-level/CPUThreadingModelData.cpp


nodist_common_sources += \
	$(multidimensional_adaptor_sources)
BUILT_SOURCES += \
	$(multidimensional_adaptor_sources)
CLEANFILES += \
	$(multidimensional_adaptor_sources)


noinstrument_sources =

instrument_ctf_sources = \
	src/instrument/ctf/ctfapi/context/CTFContextCPUHardwareCounters.cpp \
	src/instrument/ctf/ctfapi/context/CTFContextTaskHardwareCounters.cpp \
	src/instrument/ctf/ctfapi/stream/CircularBuffer.cpp \
	src/instrument/ctf/ctfapi/stream/CTFKernelEventsProvider.cpp \
	src/instrument/ctf/ctfapi/stream/CTFKernelEventsProviderDebug.cpp \
	src/instrument/ctf/ctfapi/stream/CTFKernelStream.cpp \
	src/instrument/ctf/ctfapi/stream/CTFStream.cpp \
	src/instrument/ctf/ctfapi/CTFAPI.cpp \
	src/instrument/ctf/ctfapi/CTFEvent.cpp \
	src/instrument/ctf/ctfapi/CTFKernelMetadata.cpp \
	src/instrument/ctf/ctfapi/CTFMetadata.cpp \
	src/instrument/ctf/ctfapi/CTFUserMetadata.cpp \
	src/instrument/ctf/ctfapi/CTFTrace.cpp \
	src/instrument/ctf/InstrumentCPULocalData.cpp \
	src/instrument/ctf/InstrumentExternalThreadLocalData.cpp \
	src/instrument/ctf/InstrumentInitAndShutdown.cpp \
	src/instrument/ctf/InstrumentTaskId.cpp \
	src/instrument/ctf/InstrumentTasktypeData.cpp \
	src/instrument/ctf/InstrumentThreadManagement.cpp \
	src/instrument/ctf/CTFTracepoints.cpp \
	src/instrument/support/InstrumentCPULocalDataSupport.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp

instrument_generic_ids_sources = \
	src/instrument/generic_ids/GenericIds.cpp

instrument_graph_sources = \
	$(instrument_generic_ids_sources) \
	src/instrument/graph/ExecutionSteps.cpp \
	src/instrument/graph/GenerateEdges.cpp \
	src/instrument/graph/InstrumentAddTask.cpp \
	src/instrument/graph/InstrumentDependenciesByAccessLinks.cpp \
	src/instrument/graph/InstrumentGraph.cpp \
	src/instrument/graph/InstrumentInitAndShutdown.cpp \
	src/instrument/graph/InstrumentTaskExecution.cpp \
	src/instrument/graph/InstrumentTaskWait.cpp \
	src/instrument/graph/InstrumentUserMutex.cpp \
	src/instrument/graph/PathLength.cpp \
	src/instrument/graph/SortAccessGroups.cpp \
	src/instrument/support/InstrumentThreadInstrumentationContext.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp

instrument_lint_sources = \
	src/instrument/lint/Callbacks.cpp

instrument_ovni_sources = \
	src/instrument/ovni/InstrumentExternalThreadLocalData.cpp \
	src/instrument/ovni/InstrumentInitAndShutdown.cpp \
	src/instrument/ovni/InstrumentTaskId.cpp \
	src/instrument/ovni/InstrumentTasktypeData.cpp \
	src/instrument/ovni/InstrumentThreadManagement.cpp \
	src/instrument/support/InstrumentCPULocalDataSupport.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp

instrument_stats_sources = \
	src/instrument/stats/InstrumentInitAndShutdown.cpp \
	src/instrument/stats/InstrumentStats.cpp \
	src/instrument/support/InstrumentThreadInstrumentationContext.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp

instrument_verbose_sources = \
	$(instrument_generic_ids_sources) \
	src/instrument/support/InstrumentThreadInstrumentationContext.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp \
	src/instrument/verbose/InstrumentAddTask.cpp \
	src/instrument/verbose/InstrumentBlockingAPI.cpp \
	src/instrument/verbose/InstrumentComputePlaceManagement.cpp \
	src/instrument/verbose/InstrumentDependenciesByAccess.cpp \
	src/instrument/verbose/InstrumentDependenciesByAccessLinks.cpp \
	src/instrument/verbose/InstrumentDependenciesByGroup.cpp \
	src/instrument/verbose/InstrumentInitAndShutdown.cpp \
	src/instrument/verbose/InstrumentLeaderThread.cpp \
	src/instrument/verbose/InstrumentReductions.cpp \
	src/instrument/verbose/InstrumentTaskExecution.cpp \
	src/instrument/verbose/InstrumentTaskStatus.cpp \
	src/instrument/verbose/InstrumentTaskWait.cpp \
	src/instrument/verbose/InstrumentThreadManagement.cpp \
	src/instrument/verbose/InstrumentUserMutex.cpp \
	src/instrument/verbose/InstrumentVerbose.cpp

instrument_extrae_sources = \
	$(instrument_generic_ids_sources) \
	src/instrument/extrae/ExtraeSymbolLiterals.cpp \
	src/instrument/extrae/ExtraeSymbolResolver.cpp \
	src/instrument/extrae/InstrumentExtrae.cpp \
	src/instrument/extrae/InstrumentInitAndShutdown.cpp \
	src/instrument/extrae/InstrumentReductions.cpp \
	src/instrument/support/InstrumentThreadInstrumentationContext.cpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.cpp

dist_instrument_sources = \
	$(instrument_ctf_sources) \
	$(instrument_extrae_sources) \
	$(instrument_graph_sources) \
	$(instrument_lint_sources) \
	$(instrument_ovni_sources) \
	$(instrument_stats_sources) \
	$(instrument_verbose_sources) \
	$(noinstrument_sources)


if HAVE_JEMALLOC
memory_allocator_sources =
memory_allocator_cppflags = -I$(srcdir)/src/memory/allocator/jemalloc
else
memory_allocator_sources =
memory_allocator_cppflags = -I$(srcdir)/src/memory/allocator/malloc
endif

memory_sources = $(memory_allocator_sources)
memory_cppflags = $(memory_allocator_cppflags)

dist_memory_sources = $(memory_sources)



# DLB + CPUManager
cpu_manager_sources  =
cpu_manager_ldflags  =
cpu_manager_cppflags = -I$(srcdir)/src/executors/threads/cpu-managers/default
if HAVE_DLB
cpu_manager_sources  += \
	src/executors/threads/cpu-managers/dlb/DLBCPUActivation.cpp \
	src/executors/threads/cpu-managers/dlb/DLBCPUManager.cpp \
	src/executors/threads/cpu-managers/dlb/policies/GreedyPolicy.cpp \
	src/executors/threads/cpu-managers/dlb/policies/LeWIPolicy.cpp
cpu_manager_ldflags  += $(dlb_LIBS)
cpu_manager_cppflags += $(dlb_CPPFLAGS) -DHAVE_DLB
cpu_manager_cppflags += -I$(srcdir)/src/executors/threads/cpu-managers/dlb
endif

common_sources += $(cpu_manager_sources)


# Hardware Counters
hardware_counters_sources  =
hardware_counters_ldflags  =
hardware_counters_cppflags =
if HAVE_PQOS
hardware_counters_ldflags  += $(pqos_LIBS)
hardware_counters_cppflags += $(pqos_CPPFLAGS) -DHAVE_PQOS
hardware_counters_sources  += src/hardware-counters/pqos/PQoSHardwareCounters.cpp
endif

if HAVE_PAPI
hardware_counters_ldflags  += $(papi_LIBS)
hardware_counters_cppflags += $(papi_CPPFLAGS) -DHAVE_PAPI
hardware_counters_sources  += src/hardware-counters/papi/PAPIHardwareCounters.cpp
endif

common_sources += $(hardware_counters_sources)


noinst_HEADERS = \
	src/dependencies/DataAccessBase.hpp \
	src/dependencies/DataAccessType.hpp \
	src/dependencies/DataTrackingSupport.hpp \
	src/dependencies/MultidimensionalAPITraversal.hpp \
	src/dependencies/SymbolTranslation.hpp \
	src/dependencies/discrete/BottomMapEntry.hpp \
	src/dependencies/discrete/CommutativeSemaphore.hpp \
	src/dependencies/discrete/CPUDependencyData.hpp \
	src/dependencies/discrete/DataAccess.hpp \
	src/dependencies/discrete/DataAccessFlags.hpp \
	src/dependencies/discrete/DataAccessRegistration.hpp \
	src/dependencies/discrete/DataAccessRegistrationImplementation.hpp \
	src/dependencies/discrete/Dependencies.hpp \
	src/dependencies/discrete/DependencyDomain.hpp \
	src/dependencies/discrete/DependencySystem.hpp \
	src/dependencies/discrete/DeviceReductionStorage.hpp \
	src/dependencies/discrete/MultidimensionalAPI.hpp \
	src/dependencies/discrete/ReductionInfo.hpp \
	src/dependencies/discrete/ReductionSpecific.hpp \
	src/dependencies/discrete/TaskDataAccesses.hpp \
	src/dependencies/discrete/TaskDataAccessesInfo.hpp \
	src/dependencies/discrete/devices/HostReductionStorage.hpp \
	src/dependencies/discrete/devices/CUDAReductionStorage.hpp \
	src/dependencies/linear-regions-fragmented/BottomMapEntry.hpp \
	src/dependencies/linear-regions-fragmented/CommutativeScoreboard.hpp \
	src/dependencies/linear-regions-fragmented/CPUDependencyData.hpp \
	src/dependencies/linear-regions-fragmented/DataAccess.hpp \
	src/dependencies/linear-regions-fragmented/DataAccessLink.hpp \
	src/dependencies/linear-regions-fragmented/DataAccessObjectType.hpp \
	src/dependencies/linear-regions-fragmented/DataAccessRegistration.hpp \
	src/dependencies/linear-regions-fragmented/DataAccessRegistrationImplementation.hpp \
	src/dependencies/linear-regions-fragmented/DependencyDomain.hpp \
	src/dependencies/linear-regions-fragmented/DependencySystem.hpp \
	src/dependencies/linear-regions-fragmented/MultidimensionalAPI.hpp \
	src/dependencies/linear-regions-fragmented/ReductionInfo.hpp \
	src/dependencies/linear-regions-fragmented/ReductionSpecific.hpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccessHooks.hpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccessLinkingArtifacts.hpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccessLinkingArtifactsImplementation.hpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccesses.hpp \
	src/dependencies/linear-regions-fragmented/TaskDataAccessesInfo.hpp \
	src/dependencies/linear-regions/DataAccessRegion.hpp \
	src/dependencies/linear-regions/DataAccessRegionIndexer.hpp \
	src/dependencies/linear-regions/Dependencies.hpp \
	src/dependencies/linear-regions/IntrusiveLinearRegionMap.hpp \
	src/dependencies/linear-regions/IntrusiveLinearRegionMapImplementation.hpp \
	src/dependencies/linear-regions/LinearRegionMap.hpp \
	src/dependencies/linear-regions/LinearRegionMapImplementation.hpp \
	src/executors/threads/CPU.hpp \
	src/executors/threads/CPUManager.hpp \
	src/executors/threads/CPUManagerInterface.hpp \
	src/executors/threads/CPUManagerPolicyInterface.hpp \
	src/executors/threads/TaskFinalization.hpp \
	src/executors/threads/TaskFinalizationImplementation.hpp \
	src/executors/threads/ThreadManager.hpp \
	src/executors/threads/ThreadManagerPolicy.hpp \
	src/executors/threads/WorkerThread.hpp \
	src/executors/threads/WorkerThreadImplementation.hpp \
	src/executors/threads/cpu-managers/default/DefaultCPUActivation.hpp \
	src/executors/threads/cpu-managers/default/DefaultCPUManager.hpp \
	src/executors/threads/cpu-managers/default/policies/BusyPolicy.hpp \
	src/executors/threads/cpu-managers/default/policies/HybridPolicy.hpp \
	src/executors/threads/cpu-managers/default/policies/IdlePolicy.hpp \
	src/executors/threads/cpu-managers/dlb/DLBCPUActivation.hpp \
	src/executors/threads/cpu-managers/dlb/DLBCPUManager.hpp \
	src/executors/threads/cpu-managers/dlb/policies/GreedyPolicy.hpp \
	src/executors/threads/cpu-managers/dlb/policies/LeWIPolicy.hpp \
	src/executors/threads/kernel-level/CPUThreadingModelData.hpp \
	src/executors/threads/kernel-level/WorkerThreadBase.hpp \
	src/hardware/HardwareInfo.hpp \
	src/hardware/device/Accelerator.hpp \
	src/hardware/device/DeviceEnvironment.hpp \
	src/hardware/device/cuda/CUDAAccelerator.hpp \
	src/hardware/device/cuda/CUDADeviceInfo.hpp \
	src/hardware/device/cuda/CUDAFunctions.hpp \
	src/hardware/device/cuda/CUDAStreamPool.hpp \
	src/hardware/device/cuda/CUDARuntimeLoader.hpp \
	src/hardware/device/openacc/OpenAccAccelerator.hpp \
	src/hardware/device/openacc/OpenAccDeviceInfo.hpp \
	src/hardware/device/openacc/OpenAccFunctions.hpp \
	src/hardware/device/openacc/OpenAccQueuePool.hpp \
	src/hardware/hwinfo/DeviceInfo.hpp \
	src/hardware/hwinfo/HostInfo.hpp \
	src/hardware/places/ComputePlace.hpp \
	src/hardware/places/CPUPlace.hpp \
	src/hardware/places/HardwareCache.hpp \
	src/hardware/places/L2Cache.hpp \
	src/hardware/places/L3Cache.hpp \
	src/hardware/places/MemoryPlace.hpp \
	src/hardware/places/NUMAPlace.hpp \
	src/hardware-counters/CPUHardwareCounters.hpp \
	src/hardware-counters/CPUHardwareCountersInterface.hpp \
	src/hardware-counters/HardwareCounters.hpp \
	src/hardware-counters/HardwareCountersInterface.hpp \
	src/hardware-counters/SupportedHardwareCounters.hpp \
	src/hardware-counters/TaskHardwareCounters.hpp \
	src/hardware-counters/TaskHardwareCountersInterface.hpp \
	src/hardware-counters/ThreadHardwareCounters.hpp \
	src/hardware-counters/ThreadHardwareCountersInterface.hpp \
	src/hardware-counters/papi/PAPICPUHardwareCounters.hpp \
	src/hardware-counters/papi/PAPIHardwareCounters.hpp \
	src/hardware-counters/papi/PAPITaskHardwareCounters.hpp \
	src/hardware-counters/papi/PAPIThreadHardwareCounters.hpp \
	src/hardware-counters/pqos/PQoSCPUHardwareCounters.hpp \
	src/hardware-counters/pqos/PQoSHardwareCounters.hpp \
	src/hardware-counters/pqos/PQoSTaskHardwareCounters.hpp \
	src/hardware-counters/pqos/PQoSThreadHardwareCounters.hpp \
	src/hardware-counters/rapl/RAPLHardwareCounters.hpp \
	src/instrument/api/InstrumentAddTask.hpp \
	src/instrument/api/InstrumentBlockingAPI.hpp \
	src/instrument/api/InstrumentComputePlaceManagement.hpp \
	src/instrument/api/InstrumentDataAccessTypes.hpp \
	src/instrument/api/InstrumentDebug.hpp \
	src/instrument/api/InstrumentDependenciesByAccess.hpp \
	src/instrument/api/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/api/InstrumentDependenciesByGroup.hpp \
	src/instrument/api/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/api/InstrumentDistributedMemory.hpp \
	src/instrument/api/InstrumentInitAndShutdown.hpp \
	src/instrument/api/InstrumentLeaderThread.hpp \
	src/instrument/api/InstrumentLogMessage.hpp \
	src/instrument/api/InstrumentMainThread.hpp \
	src/instrument/api/InstrumentMemory.hpp \
	src/instrument/api/InstrumentPthread.hpp \
	src/instrument/api/InstrumentReductions.hpp \
	src/instrument/api/InstrumentScheduler.hpp \
	src/instrument/api/InstrumentTaskExecution.hpp \
	src/instrument/api/InstrumentTaskStatus.hpp \
	src/instrument/api/InstrumentTaskWait.hpp \
	src/instrument/api/InstrumentThreadManagement.hpp \
	src/instrument/api/InstrumentTracingPoints.hpp \
	src/instrument/api/InstrumentUserMutex.hpp \
	src/instrument/api/InstrumentWorkerThread.hpp \
	src/instrument/ctf/CTFTracepoints.hpp \
	src/instrument/ctf/InstrumentAddTask.hpp \
	src/instrument/ctf/InstrumentBlockingAPI.hpp \
	src/instrument/ctf/InstrumentCPULocalData.hpp \
	src/instrument/ctf/InstrumentComputePlaceId.hpp \
	src/instrument/ctf/InstrumentComputePlaceManagement.hpp \
	src/instrument/ctf/InstrumentDataAccessId.hpp \
	src/instrument/ctf/InstrumentDebug.hpp \
	src/instrument/ctf/InstrumentDependenciesByAccess.hpp \
	src/instrument/ctf/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/ctf/InstrumentDependenciesByGroup.hpp \
	src/instrument/ctf/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/ctf/InstrumentDistributedMemory.hpp \
	src/instrument/ctf/InstrumentExternalThreadId.hpp \
	src/instrument/ctf/InstrumentExternalThreadLocalData.hpp \
	src/instrument/ctf/InstrumentInitAndShutdown.hpp \
	src/instrument/ctf/InstrumentInstrumentationContext.hpp \
	src/instrument/ctf/InstrumentLeaderThread.hpp \
	src/instrument/ctf/InstrumentLogMessage.hpp \
	src/instrument/ctf/InstrumentMainThread.hpp \
	src/instrument/ctf/InstrumentMemory.hpp \
	src/instrument/ctf/InstrumentPthread.hpp \
	src/instrument/ctf/InstrumentReductions.hpp \
	src/instrument/ctf/InstrumentScheduler.hpp \
	src/instrument/ctf/InstrumentTaskExecution.hpp \
	src/instrument/ctf/InstrumentTaskId.hpp \
	src/instrument/ctf/InstrumentTaskStatus.hpp \
	src/instrument/ctf/InstrumentTaskWait.hpp \
	src/instrument/ctf/InstrumentTasktypeData.hpp \
	src/instrument/ctf/InstrumentThreadId.hpp \
	src/instrument/ctf/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/ctf/InstrumentThreadLocalData.hpp \
	src/instrument/ctf/InstrumentThreadManagement.hpp \
	src/instrument/ctf/InstrumentTracingPointTypes.hpp \
	src/instrument/ctf/InstrumentTracingPoints.hpp \
	src/instrument/ctf/InstrumentUserMutex.hpp \
	src/instrument/ctf/InstrumentWorkerThread.hpp \
	src/instrument/ctf/ctfapi/CTFAPI.hpp \
	src/instrument/ctf/ctfapi/CTFClock.hpp \
	src/instrument/ctf/ctfapi/CTFEvent.hpp \
	src/instrument/ctf/ctfapi/CTFKernelMetadata.hpp \
	src/instrument/ctf/ctfapi/CTFMetadata.hpp \
	src/instrument/ctf/ctfapi/CTFTrace.hpp \
	src/instrument/ctf/ctfapi/CTFTypes.hpp \
	src/instrument/ctf/ctfapi/CTFUserMetadata.hpp \
	src/instrument/ctf/ctfapi/context/CTFContext.hpp \
	src/instrument/ctf/ctfapi/context/CTFContextCPUHardwareCounters.hpp \
	src/instrument/ctf/ctfapi/context/CTFContextTaskHardwareCounters.hpp \
	src/instrument/ctf/ctfapi/context/CTFEventContext.hpp \
	src/instrument/ctf/ctfapi/context/CTFStreamContextUnbounded.hpp \
	src/instrument/ctf/ctfapi/stream/CTFKernelEventsProvider.hpp \
	src/instrument/ctf/ctfapi/stream/CTFKernelStream.hpp \
	src/instrument/ctf/ctfapi/stream/CTFStream.hpp \
	src/instrument/ctf/ctfapi/stream/CTFStreamUnboundedPrivate.hpp \
	src/instrument/ctf/ctfapi/stream/CTFStreamUnboundedShared.hpp \
	src/instrument/ctf/ctfapi/stream/CircularBuffer.hpp \
	src/instrument/extrae/ExtraeSymbolLiterals.hpp \
	src/instrument/extrae/ExtraeSymbolResolver.hpp \
	src/instrument/extrae/InstrumentAddTask.hpp \
	src/instrument/extrae/InstrumentBlockingAPI.hpp \
	src/instrument/extrae/InstrumentCPULocalData.hpp \
	src/instrument/extrae/InstrumentCommon.hpp \
	src/instrument/extrae/InstrumentComputePlaceId.hpp \
	src/instrument/extrae/InstrumentComputePlaceManagement.hpp \
	src/instrument/extrae/InstrumentDataAccessId.hpp \
	src/instrument/extrae/InstrumentDebug.hpp \
	src/instrument/extrae/InstrumentDependenciesByAccess.hpp \
	src/instrument/extrae/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/extrae/InstrumentDependenciesByGroup.hpp \
	src/instrument/extrae/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/extrae/InstrumentDistributedMemory.hpp \
	src/instrument/extrae/InstrumentExternalThreadId.hpp \
	src/instrument/extrae/InstrumentExternalThreadLocalData.hpp \
	src/instrument/extrae/InstrumentExtrae.hpp \
	src/instrument/extrae/InstrumentInitAndShutdown.hpp \
	src/instrument/extrae/InstrumentLeaderThread.hpp \
	src/instrument/extrae/InstrumentLogMessage.hpp \
	src/instrument/extrae/InstrumentMainThread.hpp \
	src/instrument/extrae/InstrumentMemory.hpp \
	src/instrument/extrae/InstrumentPthread.hpp \
	src/instrument/extrae/InstrumentReductions.hpp \
	src/instrument/extrae/InstrumentScheduler.hpp \
	src/instrument/extrae/InstrumentTaskExecution.hpp \
	src/instrument/extrae/InstrumentTaskId.hpp \
	src/instrument/extrae/InstrumentTaskStatus.hpp \
	src/instrument/extrae/InstrumentTaskWait.hpp \
	src/instrument/extrae/InstrumentTasktypeData.hpp \
	src/instrument/extrae/InstrumentThreadId.hpp \
	src/instrument/extrae/InstrumentThreadLocalData.hpp \
	src/instrument/extrae/InstrumentThreadManagement.hpp \
	src/instrument/extrae/InstrumentTracingPointTypes.hpp \
	src/instrument/extrae/InstrumentTracingPoints.hpp \
	src/instrument/extrae/InstrumentUserMutex.hpp \
	src/instrument/extrae/InstrumentWorkerThread.hpp \
	src/instrument/extrae/PreloadedExtraeBouncer.hpp \
	src/instrument/generic_ids/GenericIds.hpp \
	src/instrument/generic_ids/InstrumentComputePlaceId.hpp \
	src/instrument/generic_ids/InstrumentExternalThreadId.hpp \
	src/instrument/generic_ids/InstrumentThreadId.hpp \
	src/instrument/graph/Color.hpp \
	src/instrument/graph/ExecutionSteps.hpp \
	src/instrument/graph/GenerateEdges.hpp \
	src/instrument/graph/InstrumentAddTask.hpp \
	src/instrument/graph/InstrumentBlockingAPI.hpp \
	src/instrument/graph/InstrumentCPULocalData.hpp \
	src/instrument/graph/InstrumentComputePlaceId.hpp \
	src/instrument/graph/InstrumentComputePlaceManagement.hpp \
	src/instrument/graph/InstrumentDataAccessId.hpp \
	src/instrument/graph/InstrumentDebug.hpp \
	src/instrument/graph/InstrumentDependenciesByAccess.hpp \
	src/instrument/graph/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/graph/InstrumentDependenciesByGroup.hpp \
	src/instrument/graph/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/graph/InstrumentDistributedMemory.hpp \
	src/instrument/graph/InstrumentExternalThreadId.hpp \
	src/instrument/graph/InstrumentExternalThreadLocalData.hpp \
	src/instrument/graph/InstrumentGraph.hpp \
	src/instrument/graph/InstrumentInitAndShutdown.hpp \
	src/instrument/graph/InstrumentLeaderThread.hpp \
	src/instrument/graph/InstrumentLogMessage.hpp \
	src/instrument/graph/InstrumentMainThread.hpp \
	src/instrument/graph/InstrumentMemory.hpp \
	src/instrument/graph/InstrumentPthread.hpp \
	src/instrument/graph/InstrumentReductions.hpp \
	src/instrument/graph/InstrumentScheduler.hpp \
	src/instrument/graph/InstrumentTaskExecution.hpp \
	src/instrument/graph/InstrumentTaskId.hpp \
	src/instrument/graph/InstrumentTaskStatus.hpp \
	src/instrument/graph/InstrumentTaskWait.hpp \
	src/instrument/graph/InstrumentTasktypeData.hpp \
	src/instrument/graph/InstrumentThreadId.hpp \
	src/instrument/graph/InstrumentThreadLocalData.hpp \
	src/instrument/graph/InstrumentThreadManagement.hpp \
	src/instrument/graph/InstrumentTracingPointTypes.hpp \
	src/instrument/graph/InstrumentTracingPoints.hpp \
	src/instrument/graph/InstrumentUserMutex.hpp \
	src/instrument/graph/InstrumentWorkerThread.hpp \
	src/instrument/graph/PathLength.hpp \
	src/instrument/graph/SortAccessGroups.hpp \
	src/instrument/lint/Callbacks.hpp \
	src/instrument/lint/InstrumentAddTask.hpp \
	src/instrument/lint/InstrumentBlockingAPI.hpp \
	src/instrument/lint/InstrumentCPULocalData.hpp \
	src/instrument/lint/InstrumentComputePlaceId.hpp \
	src/instrument/lint/InstrumentComputePlaceManagement.hpp \
	src/instrument/lint/InstrumentDataAccessId.hpp \
	src/instrument/lint/InstrumentDebug.hpp \
	src/instrument/lint/InstrumentDependenciesByAccess.hpp \
	src/instrument/lint/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/lint/InstrumentDependenciesByGroup.hpp \
	src/instrument/lint/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/lint/InstrumentDistributedMemory.hpp \
	src/instrument/lint/InstrumentExternalThreadId.hpp \
	src/instrument/lint/InstrumentExternalThreadLocalData.hpp \
	src/instrument/lint/InstrumentInitAndShutdown.hpp \
	src/instrument/lint/InstrumentInstrumentationContext.hpp \
	src/instrument/lint/InstrumentLeaderThread.hpp \
	src/instrument/lint/InstrumentLogMessage.hpp \
	src/instrument/lint/InstrumentMainThread.hpp \
	src/instrument/lint/InstrumentMemory.hpp \
	src/instrument/lint/InstrumentPthread.hpp \
	src/instrument/lint/InstrumentReductions.hpp \
	src/instrument/lint/InstrumentScheduler.hpp \
	src/instrument/lint/InstrumentTaskExecution.hpp \
	src/instrument/lint/InstrumentTaskId.hpp \
	src/instrument/lint/InstrumentTaskStatus.hpp \
	src/instrument/lint/InstrumentTaskWait.hpp \
	src/instrument/lint/InstrumentTasktypeData.hpp \
	src/instrument/lint/InstrumentThreadId.hpp \
	src/instrument/lint/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/lint/InstrumentThreadLocalData.hpp \
	src/instrument/lint/InstrumentThreadManagement.hpp \
	src/instrument/lint/InstrumentTracingPointTypes.hpp \
	src/instrument/lint/InstrumentTracingPoints.hpp \
	src/instrument/lint/InstrumentUserMutex.hpp \
	src/instrument/lint/InstrumentWorkerThread.hpp \
	src/instrument/null/InstrumentAddTask.hpp \
	src/instrument/null/InstrumentBlockingAPI.hpp \
	src/instrument/null/InstrumentCPULocalData.hpp \
	src/instrument/null/InstrumentComputePlaceId.hpp \
	src/instrument/null/InstrumentComputePlaceManagement.hpp \
	src/instrument/null/InstrumentDataAccessId.hpp \
	src/instrument/null/InstrumentDebug.hpp \
	src/instrument/null/InstrumentDependenciesByAccess.hpp \
	src/instrument/null/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/null/InstrumentDependenciesByGroup.hpp \
	src/instrument/null/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/null/InstrumentDistributedMemory.hpp \
	src/instrument/null/InstrumentExternalThreadId.hpp \
	src/instrument/null/InstrumentExternalThreadLocalData.hpp \
	src/instrument/null/InstrumentInitAndShutdown.hpp \
	src/instrument/null/InstrumentInstrumentationContext.hpp \
	src/instrument/null/InstrumentLeaderThread.hpp \
	src/instrument/null/InstrumentLogMessage.hpp \
	src/instrument/null/InstrumentMainThread.hpp \
	src/instrument/null/InstrumentMemory.hpp \
	src/instrument/null/InstrumentPthread.hpp \
	src/instrument/null/InstrumentReductions.hpp \
	src/instrument/null/InstrumentScheduler.hpp \
	src/instrument/null/InstrumentTaskExecution.hpp \
	src/instrument/null/InstrumentTaskId.hpp \
	src/instrument/null/InstrumentTaskStatus.hpp \
	src/instrument/null/InstrumentTaskWait.hpp \
	src/instrument/null/InstrumentTasktypeData.hpp \
	src/instrument/null/InstrumentThreadId.hpp \
	src/instrument/null/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/null/InstrumentThreadLocalData.hpp \
	src/instrument/null/InstrumentThreadManagement.hpp \
	src/instrument/null/InstrumentTracingPointTypes.hpp \
	src/instrument/null/InstrumentTracingPoints.hpp \
	src/instrument/null/InstrumentUserMutex.hpp \
	src/instrument/null/InstrumentWorkerThread.hpp \
	src/instrument/ovni/InstrumentAddTask.hpp \
	src/instrument/ovni/InstrumentBlockingAPI.hpp \
	src/instrument/ovni/InstrumentCPULocalData.hpp \
	src/instrument/ovni/InstrumentComputePlaceId.hpp \
	src/instrument/ovni/InstrumentComputePlaceManagement.hpp \
	src/instrument/ovni/InstrumentDataAccessId.hpp \
	src/instrument/ovni/InstrumentDebug.hpp \
	src/instrument/ovni/InstrumentDependenciesByAccess.hpp \
	src/instrument/ovni/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/ovni/InstrumentDependenciesByGroup.hpp \
	src/instrument/ovni/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/ovni/InstrumentDistributedMemory.hpp \
	src/instrument/ovni/InstrumentExternalThreadId.hpp \
	src/instrument/ovni/InstrumentExternalThreadLocalData.hpp \
	src/instrument/ovni/InstrumentInitAndShutdown.hpp \
	src/instrument/ovni/InstrumentInstrumentationContext.hpp \
	src/instrument/ovni/InstrumentLeaderThread.hpp \
	src/instrument/ovni/InstrumentLogMessage.hpp \
	src/instrument/ovni/InstrumentMainThread.hpp \
	src/instrument/ovni/InstrumentMemory.hpp \
	src/instrument/ovni/InstrumentPthread.hpp \
	src/instrument/ovni/InstrumentReductions.hpp \
	src/instrument/ovni/InstrumentScheduler.hpp \
	src/instrument/ovni/InstrumentTaskExecution.hpp \
	src/instrument/ovni/InstrumentTaskId.hpp \
	src/instrument/ovni/InstrumentTaskStatus.hpp \
	src/instrument/ovni/InstrumentTaskWait.hpp \
	src/instrument/ovni/InstrumentTasktypeData.hpp \
	src/instrument/ovni/InstrumentThreadId.hpp \
	src/instrument/ovni/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/ovni/InstrumentThreadLocalData.hpp \
	src/instrument/ovni/InstrumentThreadManagement.hpp \
	src/instrument/ovni/InstrumentTracingPointTypes.hpp \
	src/instrument/ovni/InstrumentTracingPoints.hpp \
	src/instrument/ovni/InstrumentUserMutex.hpp \
	src/instrument/ovni/InstrumentWorkerThread.hpp \
	src/instrument/ovni/OvniTrace.hpp \
	src/instrument/stats/InstrumentAddTask.hpp \
	src/instrument/stats/InstrumentBlockingAPI.hpp \
	src/instrument/stats/InstrumentCPULocalData.hpp \
	src/instrument/stats/InstrumentComputePlaceId.hpp \
	src/instrument/stats/InstrumentComputePlaceManagement.hpp \
	src/instrument/stats/InstrumentDataAccessId.hpp \
	src/instrument/stats/InstrumentDebug.hpp \
	src/instrument/stats/InstrumentDependenciesByAccess.hpp \
	src/instrument/stats/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/stats/InstrumentDependenciesByGroup.hpp \
	src/instrument/stats/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/stats/InstrumentDistributedMemory.hpp \
	src/instrument/stats/InstrumentExternalThreadId.hpp \
	src/instrument/stats/InstrumentExternalThreadLocalData.hpp \
	src/instrument/stats/InstrumentInitAndShutdown.hpp \
	src/instrument/stats/InstrumentLeaderThread.hpp \
	src/instrument/stats/InstrumentLogMessage.hpp \
	src/instrument/stats/InstrumentMainThread.hpp \
	src/instrument/stats/InstrumentMemory.hpp \
	src/instrument/stats/InstrumentPthread.hpp \
	src/instrument/stats/InstrumentReductions.hpp \
	src/instrument/stats/InstrumentScheduler.hpp \
	src/instrument/stats/InstrumentStats.hpp \
	src/instrument/stats/InstrumentTaskExecution.hpp \
	src/instrument/stats/InstrumentTaskId.hpp \
	src/instrument/stats/InstrumentTaskStatus.hpp \
	src/instrument/stats/InstrumentTaskWait.hpp \
	src/instrument/stats/InstrumentTasktypeData.hpp \
	src/instrument/stats/InstrumentThreadId.hpp \
	src/instrument/stats/InstrumentThreadLocalData.hpp \
	src/instrument/stats/InstrumentThreadManagement.hpp \
	src/instrument/stats/InstrumentTracingPointTypes.hpp \
	src/instrument/stats/InstrumentTracingPoints.hpp \
	src/instrument/stats/InstrumentUserMutex.hpp \
	src/instrument/stats/InstrumentWorkerThread.hpp \
	src/instrument/stats/Timer.hpp \
	src/instrument/support/InstrumentCPULocalDataSupport.hpp \
	src/instrument/support/InstrumentHardwarePlaceManagement.hpp \
	src/instrument/support/InstrumentInstrumentationContext.hpp \
	src/instrument/support/InstrumentStandardExternalThreadLocalData.hpp \
	src/instrument/support/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.hpp \
	src/instrument/support/backtrace/backtrace/BacktraceWalker.hpp \
	src/instrument/support/backtrace/libunwind/BacktraceWalker.hpp \
	src/instrument/support/backtrace/unsupported/BacktraceWalker.hpp \
	src/instrument/support/introspection/Addr2Line/Addr2LineCodeAddressInfo.hpp \
	src/instrument/support/introspection/Addr2Line/CodeAddressInfo.hpp \
	src/instrument/support/introspection/CodeAddressInfoBase.hpp \
	src/instrument/support/introspection/DL/CodeAddressInfo.hpp \
	src/instrument/support/introspection/DL/DLCodeAddressInfo.hpp \
	src/instrument/support/introspection/ElfUtils/CodeAddressInfo.hpp \
	src/instrument/support/introspection/ElfUtils/ElfUtilsCodeAddressInfo.hpp \
	src/instrument/verbose/InstrumentAddTask.hpp \
	src/instrument/verbose/InstrumentBlockingAPI.hpp \
	src/instrument/verbose/InstrumentCPULocalData.hpp \
	src/instrument/verbose/InstrumentComputePlaceId.hpp \
	src/instrument/verbose/InstrumentComputePlaceManagement.hpp \
	src/instrument/verbose/InstrumentDataAccessId.hpp \
	src/instrument/verbose/InstrumentDebug.hpp \
	src/instrument/verbose/InstrumentDependenciesByAccess.hpp \
	src/instrument/verbose/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/verbose/InstrumentDependenciesByGroup.hpp \
	src/instrument/verbose/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/verbose/InstrumentDistributedMemory.hpp \
	src/instrument/verbose/InstrumentExternalThreadId.hpp \
	src/instrument/verbose/InstrumentExternalThreadLocalData.hpp \
	src/instrument/verbose/InstrumentInitAndShutdown.hpp \
	src/instrument/verbose/InstrumentLeaderThread.hpp \
	src/instrument/verbose/InstrumentLogMessage.hpp \
	src/instrument/verbose/InstrumentMainThread.hpp \
	src/instrument/verbose/InstrumentMemory.hpp \
	src/instrument/verbose/InstrumentPthread.hpp \
	src/instrument/verbose/InstrumentReductions.hpp \
	src/instrument/verbose/InstrumentScheduler.hpp \
	src/instrument/verbose/InstrumentTaskExecution.hpp \
	src/instrument/verbose/InstrumentTaskId.hpp \
	src/instrument/verbose/InstrumentTaskStatus.hpp \
	src/instrument/verbose/InstrumentTaskWait.hpp \
	src/instrument/verbose/InstrumentTasktypeData.hpp \
	src/instrument/verbose/InstrumentThreadId.hpp \
	src/instrument/verbose/InstrumentThreadLocalData.hpp \
	src/instrument/verbose/InstrumentThreadManagement.hpp \
	src/instrument/verbose/InstrumentTracingPointTypes.hpp \
	src/instrument/verbose/InstrumentTracingPoints.hpp \
	src/instrument/verbose/InstrumentUserMutex.hpp \
	src/instrument/verbose/InstrumentVerbose.hpp \
	src/instrument/verbose/InstrumentWorkerThread.hpp \
	src/instrument/support/InstrumentCPULocalDataSupport.hpp \
	src/instrument/support/InstrumentHardwarePlaceManagement.hpp \
	src/instrument/support/InstrumentInstrumentationContext.hpp \
	src/instrument/support/InstrumentStandardExternalThreadLocalData.hpp \
	src/instrument/support/InstrumentThreadInstrumentationContext.hpp \
	src/instrument/support/InstrumentThreadLocalDataSupport.hpp \
	src/instrument/support/backtrace/backtrace/BacktraceWalker.hpp \
	src/instrument/support/backtrace/libunwind/BacktraceWalker.hpp \
	src/instrument/support/backtrace/unsupported/BacktraceWalker.hpp \
	src/instrument/support/introspection/Addr2Line/Addr2LineCodeAddressInfo.hpp \
	src/instrument/support/introspection/Addr2Line/CodeAddressInfo.hpp \
	src/instrument/support/introspection/CodeAddressInfoBase.hpp \
	src/instrument/support/introspection/DL/CodeAddressInfo.hpp \
	src/instrument/support/introspection/DL/DLCodeAddressInfo.hpp \
	src/instrument/support/introspection/ElfUtils/CodeAddressInfo.hpp \
	src/instrument/support/introspection/ElfUtils/ElfUtilsCodeAddressInfo.hpp \
	src/instrument/verbose/InstrumentAddTask.hpp \
	src/instrument/verbose/InstrumentBlockingAPI.hpp \
	src/instrument/verbose/InstrumentCPULocalData.hpp \
	src/instrument/verbose/InstrumentComputePlaceId.hpp \
	src/instrument/verbose/InstrumentComputePlaceManagement.hpp \
	src/instrument/verbose/InstrumentDataAccessId.hpp \
	src/instrument/verbose/InstrumentDebug.hpp \
	src/instrument/verbose/InstrumentDependenciesByAccess.hpp \
	src/instrument/verbose/InstrumentDependenciesByAccessLinks.hpp \
	src/instrument/verbose/InstrumentDependenciesByGroup.hpp \
	src/instrument/verbose/InstrumentDependencySubsystemEntryPoints.hpp \
	src/instrument/verbose/InstrumentDistributedMemory.hpp \
	src/instrument/verbose/InstrumentExternalThreadId.hpp \
	src/instrument/verbose/InstrumentExternalThreadLocalData.hpp \
	src/instrument/verbose/InstrumentInitAndShutdown.hpp \
	src/instrument/verbose/InstrumentLeaderThread.hpp \
	src/instrument/verbose/InstrumentLogMessage.hpp \
	src/instrument/verbose/InstrumentReductions.hpp \
	src/instrument/verbose/InstrumentScheduler.hpp \
	src/instrument/verbose/InstrumentTaskExecution.hpp \
	src/instrument/verbose/InstrumentTaskId.hpp \
	src/instrument/verbose/InstrumentTaskStatus.hpp \
	src/instrument/verbose/InstrumentTaskWait.hpp \
	src/instrument/verbose/InstrumentTasktypeData.hpp \
	src/instrument/verbose/InstrumentThreadId.hpp \
	src/instrument/verbose/InstrumentThreadLocalData.hpp \
	src/instrument/verbose/InstrumentThreadManagement.hpp \
	src/instrument/verbose/InstrumentTracingPointTypes.hpp \
	src/instrument/verbose/InstrumentTracingPoints.hpp \
	src/instrument/verbose/InstrumentUserMutex.hpp \
	src/instrument/verbose/InstrumentVerbose.hpp \
	src/instrument/verbose/InstrumentWorkerThread.hpp \
	src/lowlevel/BacktraceRecording.hpp \
	src/lowlevel/CompatSyscalls.hpp \
	src/lowlevel/ConditionVariable.hpp \
	src/lowlevel/EnvironmentVariable.hpp \
	src/lowlevel/FatalErrorHandler.hpp \
	src/lowlevel/MultiConditionVariable.hpp \
	src/lowlevel/PaddedSpinLock.hpp \
	src/lowlevel/PaddedTicketSpinLock.hpp \
	src/lowlevel/Padding.hpp \
	src/lowlevel/RWSpinLock.hpp \
	src/lowlevel/RWTicketSpinLock.hpp \
	src/lowlevel/SpinLock.hpp \
	src/lowlevel/SpinLockBacktracingDebug.hpp \
	src/lowlevel/SpinLockDeadlockDebug.hpp \
	src/lowlevel/SpinLockNoDebug.hpp \
	src/lowlevel/SpinLockOwnerDebug.hpp \
	src/lowlevel/SpinWait.hpp \
	src/lowlevel/DelegationLock.hpp \
	src/lowlevel/TicketArraySpinLock.hpp \
	src/lowlevel/TicketSpinLock.hpp \
	src/lowlevel/TokenizedEnvironmentVariable.hpp \
	src/lowlevel/TurboSettings.hpp \
	src/lowlevel/apple/SpinLockImplementation.hpp \
	src/lowlevel/cuda/CUDAErrorHandler.hpp \
	src/lowlevel/cxx/SpinLockImplementation.hpp \
	src/lowlevel/mpi/MPIErrorHandler.hpp \
	src/lowlevel/posix/SpinLockImplementation.hpp \
	src/lowlevel/threads/ExternalThread.hpp \
	src/lowlevel/threads/ExternalThreadGroup.hpp \
	src/lowlevel/threads/HelperThread.hpp \
	src/lowlevel/threads/KernelLevelThread.hpp \
	src/lowlevel/threads/posix/KernelLevelThread.hpp \
	src/memory/AddressSpace.hpp \
	src/memory/allocator/jemalloc/MemoryAllocator.hpp \
	src/memory/allocator/jemalloc/ObjectAllocator.hpp \
	src/memory/allocator/malloc/MemoryAllocator.hpp \
	src/memory/allocator/malloc/ObjectAllocator.hpp \
	src/memory/directory/Directory.hpp \
	src/memory/directory/HomeMapEntry.hpp \
	src/memory/directory/HomeNodeMap.hpp \
	src/memory/numa/NUMAManager.hpp \
	src/monitoring/CPUMonitor.hpp \
	src/monitoring/CPUStatistics.hpp \
	src/monitoring/Monitoring.hpp \
	src/monitoring/MonitoringSupport.hpp \
	src/monitoring/TaskMonitor.hpp \
	src/monitoring/TaskStatistics.hpp \
	src/monitoring/Tasktype.hpp \
	src/monitoring/TasktypeStatistics.hpp \
	src/scheduling/LocalScheduler.hpp \
	src/scheduling/ReadyQueue.hpp \
	src/scheduling/Scheduler.hpp \
	src/scheduling/SchedulerGenerator.hpp \
	src/scheduling/SchedulerInterface.hpp \
	src/scheduling/SchedulerSupport.hpp \
	src/scheduling/ready-queues/DeadlineQueue.hpp \
	src/scheduling/ready-queues/ReadyQueueDeque.hpp \
	src/scheduling/ready-queues/ReadyQueueMap.hpp \
	src/scheduling/schedulers/HostScheduler.hpp \
	src/scheduling/schedulers/HostUnsyncScheduler.hpp \
	src/scheduling/schedulers/SyncScheduler.hpp \
	src/scheduling/schedulers/UnsyncScheduler.hpp \
	src/scheduling/schedulers/device/DeviceScheduler.hpp \
	src/scheduling/schedulers/device/DeviceUnsyncScheduler.hpp \
	src/support/BitManipulation.hpp \
	src/support/Chrono.hpp \
	src/support/ConcurrentUnorderedList.hpp \
	src/support/Containers.hpp \
	src/support/GenericFactory.hpp \
	src/support/GlobalLock.hpp \
	src/support/InstrumentedThread.hpp \
	src/support/JsonFile.hpp \
	src/support/JsonNode.hpp \
	src/support/MathSupport.hpp \
	src/support/Objectified.hpp \
	src/support/StringLiteral.hpp \
	src/support/StringSupport.hpp \
	src/support/bitset/AtomicBitset.hpp \
	src/support/config/ConfigCentral.hpp \
	src/support/config/ConfigChecker.hpp \
	src/support/config/ConfigParser.hpp \
	src/support/config/ConfigSupport.hpp \
	src/support/config/ConfigVariable.hpp \
	src/support/config/toml.hpp \
	src/support/config/toml/color.hpp \
	src/support/config/toml/combinator.hpp \
	src/support/config/toml/comments.hpp \
	src/support/config/toml/datetime.hpp \
	src/support/config/toml/exception.hpp \
	src/support/config/toml/from.hpp \
	src/support/config/toml/get.hpp \
	src/support/config/toml/into.hpp \
	src/support/config/toml/lexer.hpp \
	src/support/config/toml/literal.hpp \
	src/support/config/toml/parser.hpp \
	src/support/config/toml/region.hpp \
	src/support/config/toml/result.hpp \
	src/support/config/toml/serializer.hpp \
	src/support/config/toml/source_location.hpp \
	src/support/config/toml/storage.hpp \
	src/support/config/toml/string.hpp \
	src/support/config/toml/traits.hpp \
	src/support/config/toml/types.hpp \
	src/support/config/toml/utility.hpp \
	src/support/config/toml/value.hpp \
	src/system/APICheck.hpp \
	src/system/BlockingAPI.hpp \
	src/system/If0Task.hpp \
	src/system/LeaderThread.hpp \
	src/system/RuntimeInfo.hpp \
	src/system/RuntimeInfoEssentials.hpp \
	src/system/Throttle.hpp \
	src/system/TrackingPoints.hpp \
	src/system/ompss/AddTask.hpp \
	src/system/ompss/SpawnFunction.hpp \
	src/system/ompss/TaskBlocking.hpp \
	src/system/ompss/TaskWait.hpp \
	src/system/ompss/UserMutex.hpp \
	src/tasks/LoopGenerator.hpp \
	src/tasks/StreamExecutor.hpp \
	src/tasks/StreamManager.hpp \
	src/tasks/Task.hpp \
	src/tasks/TaskDebuggingInterface.hpp \
	src/tasks/TaskInfoManager.hpp \
	src/tasks/TaskImplementation.hpp \
	src/tasks/Taskloop.hpp \
	src/version/VersionInfo.hpp \
	tests/Atomic.hpp \
	tests/Functors.hpp \
	tests/TestAnyProtocolProducer.hpp \
	tests/Timer.hpp \
	tests/Utils.hpp \
	tests/UtilsCUDA.hpp


EXTRA_DIST += \
	tests/select-version.sh \
	tests/tap-driver.pl \
	tests/tap-driver.sh

common_libnanos6_cppflags = $(BOOST_CPPFLAGS) -DBOOST_ENABLE_ASSERT_DEBUG_HANDLER $(PTHREAD_CFLAGS) $(hwloc_CPPFLAGS) $(hwloc_CFLAGS) $(libnuma_CPPFLAGS) $(CUDA_CFLAGS) $(MPI_CXXFLAGS) $(cpu_manager_cppflags) $(hardware_counters_cppflags) $(jemalloc_CPPFLAGS)
common_libnanos6_ldflags = $(openacc_LIBS) $(AM_LDFLAGS) -version-info $(lib_current):$(lib_revision):$(lib_age) $(jemalloc_LIBS) $(PTHREAD_CFLAGS) $(PTHREAD_LIBS) $(LDFLAGS_NOUNDEFINED) $(hwloc_LIBS) $(libnuma_LIBS) $(DLOPEN_LIBS) $(CUDA_LIBS) $(MPI_CXXLDFLAGS) $(cpu_manager_ldflags) $(hardware_counters_ldflags)
common_libnanos6_libadd = $(hwloc_LIBADD)

# This is needed for debuggable spinlocks
common_sources += $(introspection_sources)
AM_CXXFLAGS += $(introspection_cppflags) $(elfutils_CFLAGS)
common_libnanos6_ldflags  += $(BACKTRACE_LIBS) $(elfutils_LIBS)

enabled_variants =
disabled_variants =


#
# Debug variants
#

# Debug no-instrument variants
libnanos6_debug_discrete_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/null
libnanos6_debug_discrete_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_debug_discrete_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_la_SOURCES =

if DISCRETE_DEPENDENCIES
nodist_libnanos6_debug_discrete_la_SOURCES += $(common_sources) $(noinstrument_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
endif

libnanos6_debug_regions_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/null
libnanos6_debug_regions_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_debug_regions_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_la_SOURCES = $(common_sources) $(noinstrument_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)


# Debug ctf variants
libnanos6_debug_discrete_ctf_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/ctf
libnanos6_debug_discrete_ctf_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_ctf_la_LDFLAGS = $(common_libnanos6_ldflags) -lrt
libnanos6_debug_discrete_ctf_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_ctf_la_SOURCES =

libnanos6_debug_regions_ctf_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/ctf
libnanos6_debug_regions_ctf_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_ctf_la_LDFLAGS = $(common_libnanos6_ldflags) -lrt
libnanos6_debug_regions_ctf_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_ctf_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_CTF_INSTRUMENTATION
nodist_libnanos6_debug_discrete_ctf_la_SOURCES += $(common_sources) $(instrument_ctf_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_ctf_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_CTF_INSTRUMENTATION
nodist_libnanos6_debug_regions_ctf_la_SOURCES += $(common_sources) $(instrument_ctf_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_ctf_la_SOURCES += loader/disabled_variant.c
endif


# Debug extrae variants
libnanos6_debug_discrete_extrae_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/extrae -I$(srcdir)/src/instrument/support @extrae_CPPFLAGS@ -DEXTRAE_ENABLED
libnanos6_debug_discrete_extrae_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_extrae_la_LDFLAGS = $(common_libnanos6_ldflags) @extrae_LDFLAGS@ $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_debug_discrete_extrae_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_extrae_la_SOURCES =

libnanos6_debug_regions_extrae_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/extrae -I$(srcdir)/src/instrument/support @extrae_CPPFLAGS@ -DEXTRAE_ENABLED
libnanos6_debug_regions_extrae_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_extrae_la_LDFLAGS = $(common_libnanos6_ldflags) @extrae_LDFLAGS@ $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_debug_regions_extrae_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_extrae_la_SOURCES =

if DISCRETE_DEPENDENCIES
if HAVE_EXTRAE
if BUILD_EXTRAE_INSTRUMENTATION
nodist_libnanos6_debug_discrete_extrae_la_SOURCES += $(common_sources) $(instrument_extrae_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_extrae_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_debug_discrete_extrae_la_SOURCES += loader/disabled_variant.c
endif
endif

if HAVE_EXTRAE
if BUILD_EXTRAE_INSTRUMENTATION
nodist_libnanos6_debug_regions_extrae_la_SOURCES += $(common_sources) $(instrument_extrae_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_extrae_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_debug_regions_extrae_la_SOURCES += loader/disabled_variant.c
endif


# Debug graph variants
libnanos6_debug_regions_graph_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/graph -I$(srcdir)/src/instrument/support
libnanos6_debug_regions_graph_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_graph_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_debug_regions_graph_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_graph_la_SOURCES =

if BUILD_GRAPH_INSTRUMENTATION
nodist_libnanos6_debug_regions_graph_la_SOURCES += $(common_sources) $(instrument_graph_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_graph_la_SOURCES += loader/disabled_variant.c
endif


# Debug lint variants
libnanos6_debug_discrete_lint_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/lint
libnanos6_debug_discrete_lint_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_lint_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_debug_discrete_lint_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_lint_la_SOURCES =

libnanos6_debug_regions_lint_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/lint
libnanos6_debug_regions_lint_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_lint_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_debug_regions_lint_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_lint_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_LINT_INSTRUMENTATION
nodist_libnanos6_debug_discrete_lint_la_SOURCES += $(common_sources) $(instrument_lint_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_lint_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_LINT_INSTRUMENTATION
nodist_libnanos6_debug_regions_lint_la_SOURCES += $(common_sources) $(instrument_lint_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_lint_la_SOURCES += loader/disabled_variant.c
endif

# Debug ovni variants
libnanos6_debug_discrete_ovni_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) $(ovni_CPPFLAGS) -I$(srcdir)/src/instrument/ovni
libnanos6_debug_discrete_ovni_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_ovni_la_LDFLAGS = $(common_libnanos6_ldflags) $(ovni_LIBS) -lrt
libnanos6_debug_discrete_ovni_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_ovni_la_SOURCES =

libnanos6_debug_regions_ovni_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) $(ovni_CPPFLAGS) -I$(srcdir)/src/instrument/ovni
libnanos6_debug_regions_ovni_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_ovni_la_LDFLAGS = $(common_libnanos6_ldflags) $(ovni_LIBS) -lrt
libnanos6_debug_regions_ovni_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_ovni_la_SOURCES =

if DISCRETE_DEPENDENCIES
if HAVE_OVNI
if BUILD_OVNI_INSTRUMENTATION
nodist_libnanos6_debug_discrete_ovni_la_SOURCES += $(common_sources) $(instrument_ovni_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_ovni_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_debug_discrete_ovni_la_SOURCES += loader/disabled_variant.c
endif
endif

if HAVE_OVNI
if BUILD_OVNI_INSTRUMENTATION
nodist_libnanos6_debug_regions_ovni_la_SOURCES += $(common_sources) $(instrument_ovni_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_ovni_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_debug_regions_ovni_la_SOURCES += loader/disabled_variant.c
endif


# Debug stats variants
libnanos6_debug_discrete_stats_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/stats -I$(srcdir)/src/instrument/support
libnanos6_debug_discrete_stats_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_stats_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS)
libnanos6_debug_discrete_stats_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_stats_la_SOURCES =

libnanos6_debug_regions_stats_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/stats -I$(srcdir)/src/instrument/support
libnanos6_debug_regions_stats_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_stats_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS)
libnanos6_debug_regions_stats_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_stats_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_STATS_INSTRUMENTATION
nodist_libnanos6_debug_discrete_stats_la_SOURCES += $(common_sources) $(instrument_stats_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_stats_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_STATS_INSTRUMENTATION
nodist_libnanos6_debug_regions_stats_la_SOURCES += $(common_sources) $(instrument_stats_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_stats_la_SOURCES += loader/disabled_variant.c
endif


# Debug verbose variants
libnanos6_debug_discrete_verbose_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/verbose -I$(srcdir)/src/instrument/support
libnanos6_debug_discrete_verbose_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_debug_discrete_verbose_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_debug_discrete_verbose_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_discrete_verbose_la_SOURCES =

libnanos6_debug_regions_verbose_la_CPPFLAGS = $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/verbose -I$(srcdir)/src/instrument/support
libnanos6_debug_regions_verbose_la_CXXFLAGS = $(DBG_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_debug_regions_verbose_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_debug_regions_verbose_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_debug_regions_verbose_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_VERBOSE_INSTRUMENTATION
nodist_libnanos6_debug_discrete_verbose_la_SOURCES += $(common_sources) $(instrument_verbose_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_discrete_verbose_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_VERBOSE_INSTRUMENTATION
nodist_libnanos6_debug_regions_verbose_la_SOURCES += $(common_sources) $(instrument_verbose_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_debug_regions_verbose_la_SOURCES += loader/disabled_variant.c
endif


#
# Optimized variants
#

# Optimized no-instrument variants
libnanos6_optimized_discrete_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/null
libnanos6_optimized_discrete_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_optimized_discrete_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_la_SOURCES =

if DISCRETE_DEPENDENCIES
nodist_libnanos6_optimized_discrete_la_SOURCES += $(common_sources) $(noinstrument_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
endif

libnanos6_optimized_regions_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/null
libnanos6_optimized_regions_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_optimized_regions_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_la_SOURCES = $(common_sources) $(noinstrument_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)


# Optimized ctf variants
libnanos6_optimized_discrete_ctf_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/ctf
libnanos6_optimized_discrete_ctf_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_ctf_la_LDFLAGS = $(common_libnanos6_ldflags) -lrt
libnanos6_optimized_discrete_ctf_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_ctf_la_SOURCES =

libnanos6_optimized_regions_ctf_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/ctf
libnanos6_optimized_regions_ctf_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_ctf_la_LDFLAGS = $(common_libnanos6_ldflags) -lrt
libnanos6_optimized_regions_ctf_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_ctf_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_CTF_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_ctf_la_SOURCES += $(common_sources) $(instrument_ctf_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_ctf_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_CTF_INSTRUMENTATION
enabled_variants += ctf
nodist_libnanos6_optimized_regions_ctf_la_SOURCES += $(common_sources) $(instrument_ctf_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += ctf
nodist_libnanos6_optimized_regions_ctf_la_SOURCES += loader/disabled_variant.c
endif


# Optimized extrae variants
libnanos6_optimized_discrete_extrae_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/extrae -I$(srcdir)/src/instrument/support @extrae_CPPFLAGS@ -DEXTRAE_ENABLED
libnanos6_optimized_discrete_extrae_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_extrae_la_LDFLAGS = $(common_libnanos6_ldflags) @extrae_LDFLAGS@ $(CLOCK_LIBS)
libnanos6_optimized_discrete_extrae_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_extrae_la_SOURCES =

libnanos6_optimized_regions_extrae_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/extrae -I$(srcdir)/src/instrument/support @extrae_CPPFLAGS@ -DEXTRAE_ENABLED
libnanos6_optimized_regions_extrae_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_extrae_la_LDFLAGS = $(common_libnanos6_ldflags) @extrae_LDFLAGS@ $(CLOCK_LIBS)
libnanos6_optimized_regions_extrae_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_extrae_la_SOURCES =

if DISCRETE_DEPENDENCIES
if HAVE_EXTRAE
if BUILD_EXTRAE_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_extrae_la_SOURCES += $(common_sources) $(instrument_extrae_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_extrae_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_optimized_discrete_extrae_la_SOURCES += loader/disabled_variant.c
endif
endif

if HAVE_EXTRAE
if BUILD_EXTRAE_INSTRUMENTATION
enabled_variants += extrae
nodist_libnanos6_optimized_regions_extrae_la_SOURCES += $(common_sources) $(instrument_extrae_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += extrae
nodist_libnanos6_optimized_regions_extrae_la_SOURCES += loader/disabled_variant.c
endif
else
disabled_variants += extrae
nodist_libnanos6_optimized_regions_extrae_la_SOURCES += loader/disabled_variant.c
endif


# Optimized graph variants
libnanos6_optimized_regions_graph_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/graph -I$(srcdir)/src/instrument/support
libnanos6_optimized_regions_graph_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_graph_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_optimized_regions_graph_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_graph_la_SOURCES =

if BUILD_GRAPH_INSTRUMENTATION
enabled_variants += graph
nodist_libnanos6_optimized_regions_graph_la_SOURCES += $(common_sources) $(instrument_graph_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += graph
nodist_libnanos6_optimized_regions_graph_la_SOURCES += loader/disabled_variant.c
endif


# Optimized lint variants
# Lint variants cannot use optimization flags
libnanos6_optimized_discrete_lint_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/lint
libnanos6_optimized_discrete_lint_la_CXXFLAGS = $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_lint_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_optimized_discrete_lint_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_lint_la_SOURCES =

libnanos6_optimized_regions_lint_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/lint
libnanos6_optimized_regions_lint_la_CXXFLAGS = $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_lint_la_LDFLAGS = $(common_libnanos6_ldflags)
libnanos6_optimized_regions_lint_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_lint_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_LINT_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_lint_la_SOURCES += $(common_sources) $(instrument_lint_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_lint_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_LINT_INSTRUMENTATION
enabled_variants += lint
nodist_libnanos6_optimized_regions_lint_la_SOURCES += $(common_sources) $(instrument_lint_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += lint
nodist_libnanos6_optimized_regions_lint_la_SOURCES += loader/disabled_variant.c
endif

# Optimized ovni variants
libnanos6_optimized_discrete_ovni_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) $(ovni_CPPFLAGS) -I$(srcdir)/src/instrument/ovni
libnanos6_optimized_discrete_ovni_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_ovni_la_LDFLAGS = $(common_libnanos6_ldflags) $(ovni_LIBS) -lrt
libnanos6_optimized_discrete_ovni_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_ovni_la_SOURCES =

libnanos6_optimized_regions_ovni_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) $(ovni_CPPFLAGS) -I$(srcdir)/src/instrument/ovni
libnanos6_optimized_regions_ovni_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_ovni_la_LDFLAGS = $(common_libnanos6_ldflags) $(ovni_LIBS) -lrt
libnanos6_optimized_regions_ovni_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_ovni_la_SOURCES =

if DISCRETE_DEPENDENCIES
if HAVE_OVNI
if BUILD_OVNI_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_ovni_la_SOURCES += $(common_sources) $(instrument_ovni_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_ovni_la_SOURCES += loader/disabled_variant.c
endif
else
nodist_libnanos6_optimized_discrete_ovni_la_SOURCES += loader/disabled_variant.c
endif
endif

if HAVE_OVNI
if BUILD_OVNI_INSTRUMENTATION
enabled_variants += ovni
nodist_libnanos6_optimized_regions_ovni_la_SOURCES += $(common_sources) $(instrument_ovni_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += ovni
nodist_libnanos6_optimized_regions_ovni_la_SOURCES += loader/disabled_variant.c
endif
else
disabled_variants += ovni
nodist_libnanos6_optimized_regions_ovni_la_SOURCES += loader/disabled_variant.c
endif

# Optimized stats variants
libnanos6_optimized_discrete_stats_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/stats -I$(srcdir)/src/instrument/support
libnanos6_optimized_discrete_stats_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) -g2 $(discrete_dependency_flags)
libnanos6_optimized_discrete_stats_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS)
libnanos6_optimized_discrete_stats_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_stats_la_SOURCES =

libnanos6_optimized_regions_stats_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/stats -I$(srcdir)/src/instrument/support
libnanos6_optimized_regions_stats_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) -g2 $(regions_dependency_flags)
libnanos6_optimized_regions_stats_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS)
libnanos6_optimized_regions_stats_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_stats_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_STATS_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_stats_la_SOURCES += $(common_sources) $(instrument_stats_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_stats_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_STATS_INSTRUMENTATION
enabled_variants += stats
nodist_libnanos6_optimized_regions_stats_la_SOURCES += $(common_sources) $(instrument_stats_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += stats
nodist_libnanos6_optimized_regions_stats_la_SOURCES += loader/disabled_variant.c
endif


# Optimized verbose variants
libnanos6_optimized_discrete_verbose_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/verbose -I$(srcdir)/src/instrument/support
libnanos6_optimized_discrete_verbose_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(discrete_dependency_flags)
libnanos6_optimized_discrete_verbose_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_optimized_discrete_verbose_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_discrete_verbose_la_SOURCES =

libnanos6_optimized_regions_verbose_la_CPPFLAGS = -DNDEBUG $(common_libnanos6_cppflags) $(memory_cppflags) -I$(srcdir)/src/instrument/verbose -I$(srcdir)/src/instrument/support
libnanos6_optimized_regions_verbose_la_CXXFLAGS = $(OPT_CXXFLAGS) $(AM_CXXFLAGS) $(regions_dependency_flags)
libnanos6_optimized_regions_verbose_la_LDFLAGS = $(common_libnanos6_ldflags) $(CLOCK_LIBS) $(ANDROID_LOG_LIBS)
libnanos6_optimized_regions_verbose_la_LIBADD = $(common_libnanos6_libadd)
nodist_libnanos6_optimized_regions_verbose_la_SOURCES =

if DISCRETE_DEPENDENCIES
if BUILD_VERBOSE_INSTRUMENTATION
nodist_libnanos6_optimized_discrete_verbose_la_SOURCES += $(common_sources) $(instrument_verbose_sources) $(memory_sources) $(discrete_dependency_sources) $(nodist_common_sources)
else
nodist_libnanos6_optimized_discrete_verbose_la_SOURCES += loader/disabled_variant.c
endif
endif

if BUILD_VERBOSE_INSTRUMENTATION
enabled_variants += verbose
nodist_libnanos6_optimized_regions_verbose_la_SOURCES += $(common_sources) $(instrument_verbose_sources) $(memory_sources) $(regions_dependency_sources) $(nodist_common_sources)
else
disabled_variants += verbose
nodist_libnanos6_optimized_regions_verbose_la_SOURCES += loader/disabled_variant.c
endif


if !DISCRETE_DEPENDENCIES
nodist_libnanos6_debug_discrete_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_debug_discrete_ctf_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_debug_discrete_extrae_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_debug_discrete_lint_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_debug_discrete_stats_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_debug_discrete_verbose_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_ctf_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_extrae_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_lint_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_stats_la_SOURCES += loader/disabled_variant.c
nodist_libnanos6_optimized_discrete_verbose_la_SOURCES += loader/disabled_variant.c
endif


deprecated_libs = \
	libnanos6-optimized.la \
	libnanos6-debug.la \
	libnanos6-turbo.la \
	libnanos6-extrae.la \
	libnanos6-extrae-debug.la \
	libnanos6-profile.la \
	libnanos6-stats.la \
	libnanos6-stats-papi.la \
	libnanos6-stats-papi-discrete.la \
	libnanos6-stats-papi-linear-regions-fragmented.la \
	libnanos6-verbose.la \
	libnanos6-verbose-debug.la \
	libnanos6-null.la \
	libnanos6-null-cb.la \
	libnanos6-null-sb.la \
	libnanos6-optimized-linear-regions-fragmented.la \
	libnanos6-ctf-linear-regions-fragmented.la \
	libnanos6-debug-linear-regions-fragmented.la \
	libnanos6-turbo-linear-regions-fragmented.la \
	libnanos6-extrae-linear-regions-fragmented.la \
	libnanos6-extrae-debug-linear-regions-fragmented.la \
	libnanos6-graph-linear-regions-fragmented.la \
	libnanos6-graph-debug-linear-regions-fragmented.la \
	libnanos6-lint-linear-regions-fragmented.la \
	libnanos6-stats-linear-regions-fragmented.la \
	libnanos6-verbose-linear-regions-fragmented.la \
	libnanos6-verbose-debug-linear-regions-fragmented.la \
	libnanos6-ctf-discrete.la \
	libnanos6-turbo-discrete.la \
	libnanos6-extrae-discrete.la \
	libnanos6-extrae-debug-discrete.la \
	libnanos6-lint-discrete.la \
	libnanos6-stats-discrete.la \
	libnanos6-verbose-discrete.la \
	libnanos6-verbose-debug-discrete.la

# Extra libraries and binaries to uninstall manually
uninstall_libs = nanos6/libprv.la
uninstall_bins = nanos6-ctf2prv-fast nanos6-mergeprv
uninstall_links = nanos6-ctf2prv


all-local: $(lib_OBJECTS)

install-exec-local: $(lib_OBJECTS)
	@$(NORMAL_INSTALL)
	@list='$(lib_OBJECTS)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
		if test -f $$p; then \
		list2="$$list2 $$p"; \
		else :; fi; \
	done; \
	test -z "$$list2" || { \
		echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
		$(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
		echo " $(INSTALL) $$list2 '$(DESTDIR)$(libdir)'"; \
		$(INSTALL) $$list2 "$(DESTDIR)$(libdir)"; \
	}
	@echo Removing deprecated headers
	for f in nanos6_rt_interface.h nanos6_debug_interface.h dependencies.h ; do \
		if test -f "$(DESTDIR)$(nanos6includedir)/$$f" ; then \
			rm "$(DESTDIR)$(nanos6includedir)/$$f" ; \
		fi ; \
	done
	@echo Removing deprecated runtime implementations
	for l in $(deprecated_libs) ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing deprecated helper library
	for l in libnanos6-main-wrapper.a ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing deprecated documentation files
	for f in scripts/nanos6_hwcounters.json ; do \
		if test -f "$(DESTDIR)$(docdir)/$$f" ; then \
			rm -f "$(DESTDIR)$(docdir)/$$f" ; \
		fi ; \
	done
	@echo Removing other libraries
	for l in $(uninstall_libs) ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing other binaries
	for f in $(uninstall_bins) ; do \
		if test -f "$(DESTDIR)$(bindir)/$$f" ; then \
			rm -f "$(DESTDIR)$(bindir)/$$f" ; \
		fi ; \
	done
	@echo Removing other links
	for f in $(uninstall_links) ; do \
		if test -L "$(DESTDIR)$(bindir)/$$f" ; then \
			rm -f "$(DESTDIR)$(bindir)/$$f" ; \
		fi ; \
	done


uninstall-hook:
	for l in $(lib_OBJECTS) ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing deprecated headers
	for f in nanos6_rt_interface.h nanos6_debug_interface.h dependencies.h ; do \
		if test -f "$(DESTDIR)$(nanos6includedir)/$$f" ; then \
			rm "$(DESTDIR)$(nanos6includedir)/$$f" ; \
		fi ; \
	done
	@echo Removing deprecated runtime implementations
	for l in $(deprecated_libs) ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing deprecated helper library
	for l in libnanos6-main-wrapper.a ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing deprecated documentation files
	for f in scripts/nanos6_hwcounters.json ; do \
		if test -f "$(DESTDIR)$(docdir)/$$f" ; then \
			rm -f "$(DESTDIR)$(docdir)/$$f" ; \
		fi ; \
	done
	@echo Removing other libraries
	for l in $(uninstall_libs) ; do \
		if test -f "$(DESTDIR)$(libdir)/$$l" ; then \
			$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$l" ; \
		fi ; \
	done
	@echo Removing other binaries
	for f in $(uninstall_bins) ; do \
		if test -f "$(DESTDIR)$(bindir)/$$f" ; then \
			rm -f "$(DESTDIR)$(bindir)/$$f" ; \
		fi ; \
	done
	@echo Removing other links
	for f in $(uninstall_links) ; do \
		if test -L "$(DESTDIR)$(bindir)/$$f" ; then \
			rm -f "$(DESTDIR)$(bindir)/$$f" ; \
		fi ; \
	done

install-exec-hook:
	cd $(DESTDIR)$(bindir) && $(LN_S) ctf2prv nanos6-ctf2prv

install-data-hook:
	chmod +x $(DESTDIR)$(docdir)/scripts/ctf/wrappers/ctf2prv_marenostrum4.sh \
	         $(DESTDIR)$(docdir)/scripts/ctf/wrappers/ctf2prv_nord3.sh \
	         $(DESTDIR)$(docdir)/scripts/ctf/wrappers/ctf2prv_cte-amd.sh \
	         $(DESTDIR)$(docdir)/scripts/ctf/wrappers/ctf2prv_cte-power.sh



libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool


if FROM_GIT_REPOSITORY
src/version/CodeVersionInfo.cpp: $(srcdir)/.git COPYING
	$(AM_V_GEN)mkdir -p src/version/ ; \
	echo '#include "src/version/VersionInfo.hpp"' > src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo -n 'char const * nanos6_version = "$(NANOS6_VERSION) ' >> src/version/CodeVersionInfo.cpp ; \
	ver=`$(GIT) --git-dir="$(srcdir)/.git" show --pretty=format:'%ci %h' -s HEAD` ; echo -n $$ver >> src/version/CodeVersionInfo.cpp ; \
	echo '";' >> src/version/CodeVersionInfo.cpp ; \
	\
	echo -n 'char const * nanos6_branch = "' >> src/version/CodeVersionInfo.cpp ; \
	branch=`$(GIT) --git-dir="$(srcdir)/.git" symbolic-ref HEAD | sed 's@refs/heads/@@'` ; echo -n $$branch >> src/version/CodeVersionInfo.cpp ; \
	echo '";' >> src/version/CodeVersionInfo.cpp ; \
	\
	echo >> src/version/CodeVersionInfo.cpp
if EMBED_CODE_CHANGES
	$(AM_V_GEN2)echo -n 'char const * nanos6_patches = "' >> src/version/CodeVersionInfo.cpp ; \
	( \
		cd $(srcdir) ; \
		git diff ; \
		for i in `git ls-files --others --exclude-standard`; do \
			git diff --no-index /dev/null $$i ; \
		done \
	) | sed 's@\\@\\\\@g;s@"@\\"@g' | awk 'BEGIN {ORS="\\n";} {print $$0;}' >> src/version/CodeVersionInfo.cpp ; \
	echo '";' >> src/version/CodeVersionInfo.cpp
else
	$(AM_V_GEN2)echo 'char const * nanos6_patches = nullptr;' >> src/version/CodeVersionInfo.cpp
endif
	$(AM_V_GEN3)echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo 'char const * nanos6_copyright = "$(NANOS6_COPYRIGHT)";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo 'char const * nanos6_license = "$(NANOS6_LICENSE)";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo -n 'char const * nanos6_full_license = "' >> src/version/CodeVersionInfo.cpp ; \
	cat $(top_srcdir)/COPYING | sed 's@\\@\\\\@g;s@"@\\"@g' | awk 'BEGIN {ORS="\\n";} {print $$0;}' >> src/version/CodeVersionInfo.cpp ; \
	echo '";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp
else
src/version/CodeVersionInfo.cpp: COPYING
	$(AM_V_GEN)mkdir -p src/version/ ; \
	echo '#include "src/version/VersionInfo.hpp"' > src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	if [ -n "$(NANOS6_GIT_VERSION)" ]; then \
		version="$(NANOS6_VERSION) $(NANOS6_GIT_VERSION)"; \
	else \
		version="$(NANOS6_VERSION)"; \
	fi ; \
	if [ -n "$(NANOS6_GIT_BRANCH)" ]; then \
		branch="$(NANOS6_GIT_BRANCH)"; \
	else \
		branch="none"; \
	fi ; \
	echo "char const * nanos6_version = \"$$version\";" >> src/version/CodeVersionInfo.cpp ; \
	\
	echo "char const * nanos6_branch = \"$$branch\";" >> src/version/CodeVersionInfo.cpp ; \
	\
	echo >> src/version/CodeVersionInfo.cpp ; \
	echo 'char const * nanos6_patches = nullptr;' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo 'char const * nanos6_copyright = "$(NANOS6_COPYRIGHT)";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo 'char const * nanos6_license = "$(NANOS6_LICENSE)";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp ; \
	\
	echo -n 'char const * nanos6_full_license = "' >> src/version/CodeVersionInfo.cpp ; \
	cat $(top_srcdir)/COPYING | sed 's@\\@\\\\@g;s@"@\\"@g' | awk 'BEGIN {ORS="\\n";} {print $$0;}' >> src/version/CodeVersionInfo.cpp ; \
	echo '";' >> src/version/CodeVersionInfo.cpp ; \
	echo >> src/version/CodeVersionInfo.cpp
endif


src/version/CompilerVersionInfo.cpp: Makefile
	$(AM_V_GEN)mkdir -p src/version/ ; \
	echo '#include "src/version/VersionInfo.hpp"' > src/version/CompilerVersionInfo.cpp ; \
	echo >> src/version/CompilerVersionInfo.cpp ; \
	echo >> src/version/CompilerVersionInfo.cpp ; \
	\
	echo 'char const * nanos6_compiler_version = "$(CXX_VERSION)";' >> src/version/CompilerVersionInfo.cpp ; \
	echo '#ifdef NDEBUG' >> src/version/CompilerVersionInfo.cpp ; \
	echo 'char const * nanos6_compiler_flags = "-DNDEBUG $(OPT_CXXFLAGS)";' >> src/version/CompilerVersionInfo.cpp ; \
	echo '#else' >> src/version/CompilerVersionInfo.cpp ; \
	echo 'char const * nanos6_compiler_flags = "$(DBG_CXXFLAGS)";' >> src/version/CompilerVersionInfo.cpp ; \
	echo '#endif' >> src/version/CompilerVersionInfo.cpp ; \
	echo >> src/version/CompilerVersionInfo.cpp


# Gather all the names of disabled features, used to build the config file for this installation
disabled_config_features=

if !USE_CUDA
disabled_config_features += "CUDA"
endif

if !USE_OPENACC
disabled_config_features += "OPENACC"
endif

# Cluster is not supported
disabled_config_features += "CLUSTER"

if !HAVE_DLB
disabled_config_features += "DLB"
endif

if !BUILD_CTF_INSTRUMENTATION
disabled_config_features += "CTF"
endif

if !BUILD_OVNI_INSTRUMENTATION
disabled_config_features += "OVNI"
endif

if !BUILD_GRAPH_INSTRUMENTATION
disabled_config_features += "GRAPH"
endif

if !BUILD_VERBOSE_INSTRUMENTATION
disabled_config_features += "VERBOSE"
endif

if !BUILD_EXTRAE_INSTRUMENTATION
disabled_config_features += "EXTRAE"
endif

if !HAVE_PAPI
disabled_config_features += "PAPI"
endif

if !HAVE_PQOS
disabled_config_features += "PQOS"
endif

# Generate processed config file according to user chosen installation
scripts/nanos6.toml: $(top_srcdir)/scripts/generate_config.sh $(top_srcdir)/scripts/nanos6_defconfig.toml
	$(top_srcdir)/scripts/generate_config.sh $(top_srcdir)/scripts/nanos6_defconfig.toml $(disabled_config_features) > scripts/nanos6.toml

# All potential files in those lists will be distributed
# regardless of the Makefile conditionals
noinst_HEADERS += \
	$(common_sources) \
	$(dist_dependency_sources) \
	$(dist_memory_sources) \
	$(dist_instrument_sources) \
	loader/disabled_variant.c

EXTRA_DIST += \
	CHANGELOG.md \
	COPYING \
	README.md \
	docs/ctf/CTF.md \
	docs/ctf/Developer.md \
	docs/devices/CUDA.md \
	docs/devices/Devices.md \
	docs/devices/OpenACC.md \
	scripts/generate_config.sh \
	scripts/nanos6_defconfig.toml \
	$(HWLOC_EMBEDDED_SUBDIR)


CLEANFILES += LICENSE.txt

LICENSE.txt: COPYING
	$(AM_V_GEN)cp $^ $@


doc_DATA = \
	LICENSE.txt


AM_V_CHECK = $(am__v_CHECK_@AM_V@)
am__v_CHECK_ = $(am__v_CHECK_@AM_DEFAULT_V@)
am__v_CHECK_0 = @echo "  CHECK   " $@;
am__v_CHECK_1 =


check-copyright: $(nodist_nanos6include_HEADERS)
	@for f in \
		$$(find $(top_srcdir) -name '*.[ch]pp' -or -name '*.[ch]') \
		$$(find $(top_srcdir)/m4 -name '*.m4') \
		$(nodist_nanos6include_HEADERS) \
		$(top_srcdir)/loader/scripts/*.sh \
	; do \
		if ! grep Copyright $$f > /dev/null ; then \
			echo Error: $$f is missing the copyright notice 1>&2 ; \
			fail=true; \
		fi ; \
	done ; \
	test -z $$fail


show-test-env:
	@echo env LD_LIBRARY_PATH=\"$$(readlink -f $(top_builddir)/.libs):"$$"{LD_LIBRARY_PATH}\"

show-enabled-variants:
	@echo $(enabled_variants)

show-disabled-variants:
	@echo $(disabled_variants)


paraverconfigdir = ${docdir}
nobase_dist_paraverconfig_DATA = \
	paraver-cfg/nanos6/00_overview.cfg \
	paraver-cfg/nanos6/01_overview_histograms.cfg \
	paraver-cfg/nanos6/02_overview_hardware_counters.cfg \
	paraver-cfg/nanos6/03_overview_hardware_counter_histograms.cfg \
	paraver-cfg/nanos6/advanced/2d_general.cfg \
	paraver-cfg/nanos6/advanced/2dh_effective_paralelism.cfg \
	paraver-cfg/nanos6/advanced/3dh_cycles_per_us_by_runtime_state.cfg \
	paraver-cfg/nanos6/advanced/3dh_cycles_per_us_by_task.cfg \
	paraver-cfg/nanos6/advanced/3dh_instructions_vs_cycles.cfg \
	paraver-cfg/nanos6/advanced/3dh_runtime_state_duration.cfg \
	paraver-cfg/nanos6/advanced/3dh_task_duration.cfg \
	paraver-cfg/nanos6/advanced/3dh_task_frequency.cfg \
	paraver-cfg/nanos6/advanced/3dh_task_instructions.cfg \
	paraver-cfg/nanos6/advanced/3dh_task_ipc.cfg \
	paraver-cfg/nanos6/advanced/3dh_task_l2d_miss_ratio.cfg \
	paraver-cfg/nanos6/advanced/cpu.cfg \
	paraver-cfg/nanos6/advanced/effective_paralelism.cfg \
	paraver-cfg/nanos6/advanced/instantiating_function_name_and_code_line.cfg \
	paraver-cfg/nanos6/advanced/nesting_level.cfg \
	paraver-cfg/nanos6/advanced/numa_node.cfg \
	paraver-cfg/nanos6/advanced/reference_clock.cfg \
	paraver-cfg/nanos6/advanced/running_function_name_and_code_line.cfg \
	paraver-cfg/nanos6/advanced/runtime_state.cfg \
	paraver-cfg/nanos6/advanced/thread.cfg \
	paraver-cfg/nanos6/advanced/thread_creation.cfg \
	paraver-cfg/nanos6/advanced/thread_creation_and_runtime_state.cfg \
	paraver-cfg/nanos6/advanced/thread_creation_latency.cfg \
	paraver-cfg/nanos6/graph_and_scheduling/creating_submitting_task.cfg \
	paraver-cfg/nanos6/graph_and_scheduling/nb_ready_tasks.cfg \
	paraver-cfg/nanos6/graph_and_scheduling/nb_tasks_in_graph.cfg \
	paraver-cfg/nanos6/graph_and_scheduling/task_being_created.cfg \
	paraver-cfg/nanos6/tasks/3dh_duration_task.cfg \
	paraver-cfg/nanos6/tasks/3dh_instr_task.cfg \
	paraver-cfg/nanos6/tasks/3dh_ipc_task.cfg \
	paraver-cfg/nanos6/tasks/task_and_deps.cfg \
	paraver-cfg/nanos6/tasks/task_number.cfg \
	paraver-cfg/nanos6/tasks/task_priority.cfg \
	paraver-cfg/nanos6/ctf2prv/ctf_buffers_flush_to_disk.cfg \
	paraver-cfg/nanos6/ctf2prv/hardware_counters.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_blocked_tasks.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_blocked_workers.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_created_tasks.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_created_workers.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_running_tasks.cfg \
	paraver-cfg/nanos6/ctf2prv/number_of_running_workers.cfg \
	paraver-cfg/nanos6/ctf2prv/runtime_status_simple.cfg \
	paraver-cfg/nanos6/ctf2prv/runtime_subsystems.cfg \
	paraver-cfg/nanos6/ctf2prv/task_ids.cfg \
	paraver-cfg/nanos6/ctf2prv/tasks.cfg \
	paraver-cfg/nanos6/ctf2prv/tasks_and_runtime.cfg \
	paraver-cfg/nanos6/ctf2prv/task_source.cfg \
	paraver-cfg/nanos6/ctf2prv/thread_id.cfg \
	paraver-cfg/nanos6/ctf2prv/kernel/kernel_preemptions.cfg \
	paraver-cfg/nanos6/ctf2prv/kernel/kernel_syscalls.cfg \
	paraver-cfg/nanos6/ctf2prv/kernel/kernel_thread_id.cfg


configfiledir = ${docdir}
nobase_nodist_configfile_DATA = \
	scripts/nanos6.toml

ctfdir = ${docdir}
nobase_dist_ctf_DATA = \
	scripts/ctf/plugins/bt_plugin_nanos6.py \
	scripts/ctf/plugins/executionmodel.py \
	scripts/ctf/plugins/hwcdefs.py \
	scripts/ctf/plugins/kernelmodel.py \
	scripts/ctf/plugins/paravertrace.py \
	scripts/ctf/plugins/paraverviews.py \
	scripts/ctf/plugins/runtimemodel.py \
	scripts/ctf/wrappers/ctf2prv_marenostrum4.sh \
	scripts/ctf/wrappers/ctf2prv_nord3.sh \
	scripts/ctf/wrappers/ctf2prv_cte-amd.sh \
	scripts/ctf/wrappers/ctf2prv_cte-power.sh

dist_bin_SCRIPTS = \
	scripts/ctf/ctf2prv \
	scripts/ctf/ctfkerneldefs \
	scripts/ctf/ctfstats

dist_noinst_SCRIPTS = autogen.sh

## --------------------------------- ##
## Format-independent Doxygen rules. ##
## --------------------------------- ##
if DX_COND_doc
## ------------------------------- ##
## Rules specific for HTML output. ##
## ------------------------------- ##
if DX_COND_html
DX_CLEAN_HTML = @DX_DOCDIR@/html
endif DX_COND_html
## ------------------------------ ##
## Rules specific for CHM output. ##
## ------------------------------ ##
if DX_COND_chm
DX_CLEAN_CHM = @DX_DOCDIR@/chm
if DX_COND_chi
DX_CLEAN_CHI = @DX_DOCDIR@/@PACKAGE@.chi
endif DX_COND_chi
endif DX_COND_chm
## ------------------------------ ##
## Rules specific for MAN output. ##
## ------------------------------ ##
if DX_COND_man
DX_CLEAN_MAN = @DX_DOCDIR@/man
endif DX_COND_man
## ------------------------------ ##
## Rules specific for RTF output. ##
## ------------------------------ ##
if DX_COND_rtf
DX_CLEAN_RTF = @DX_DOCDIR@/rtf
endif DX_COND_rtf
## ------------------------------ ##
## Rules specific for XML output. ##
## ------------------------------ ##
if DX_COND_xml
DX_CLEAN_XML = @DX_DOCDIR@/xml
endif DX_COND_xml
## ----------------------------- ##
## Rules specific for PS output. ##
## ----------------------------- ##
if DX_COND_ps
DX_CLEAN_PS = @DX_DOCDIR@/@PACKAGE@.ps
DX_PS_GOAL = doxygen-ps
doxygen-ps: @DX_DOCDIR@/@PACKAGE@.ps
@DX_DOCDIR@/@PACKAGE@.ps: @DX_DOCDIR@/@PACKAGE@.tag
	cd @DX_DOCDIR@/latex; \
	rm -f *.aux *.toc *.idx *.ind *.ilg *.log *.out; \
	$(DX_LATEX) refman.tex; \
	$(DX_MAKEINDEX) refman.idx; \
	$(DX_LATEX) refman.tex; \
	countdown=5; \
	while $(DX_EGREP) 'Rerun (LaTeX|to get cross-references right)' \
		refman.log > /dev/null 2>&1 \
	&& test $$countdown -gt 0; do \
		$(DX_LATEX) refman.tex; \
		countdown=`expr $$countdown - 1`; \
	done; \
	$(DX_DVIPS) -o ../@PACKAGE@.ps refman.dvi
endif DX_COND_ps
## ------------------------------ ##
## Rules specific for PDF output. ##
## ------------------------------ ##
if DX_COND_pdf
DX_CLEAN_PDF = @DX_DOCDIR@/@PACKAGE@.pdf
DX_PDF_GOAL = doxygen-pdf
doxygen-pdf: @DX_DOCDIR@/@PACKAGE@.pdf
@DX_DOCDIR@/@PACKAGE@.pdf: @DX_DOCDIR@/@PACKAGE@.tag
	cd @DX_DOCDIR@/latex; \
	rm -f *.aux *.toc *.idx *.ind *.ilg *.log *.out; \
	$(DX_PDFLATEX) refman.tex; \
	$(DX_MAKEINDEX) refman.idx; \
	$(DX_PDFLATEX) refman.tex; \
	countdown=5; \
	while $(DX_EGREP) 'Rerun (LaTeX|to get cross-references right)' \
		refman.log > /dev/null 2>&1 \
	&& test $$countdown -gt 0; do \
		$(DX_PDFLATEX) refman.tex; \
		countdown=`expr $$countdown - 1`; \
	done; \
	mv refman.pdf ../@PACKAGE@.pdf
endif DX_COND_pdf
## ------------------------------------------------- ##
## Rules specific for LaTeX (shared for PS and PDF). ##
## ------------------------------------------------- ##
if DX_COND_latex
DX_CLEAN_LATEX = @DX_DOCDIR@/latex
endif DX_COND_latex
.PHONY: doxygen-run doxygen-doc $(DX_PS_GOAL) $(DX_PDF_GOAL)
.INTERMEDIATE: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)
doxygen-run: @DX_DOCDIR@/@PACKAGE@.tag
doxygen-doc: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)
@DX_DOCDIR@/@PACKAGE@.tag: $(DX_CONFIG) $(pkginclude_HEADERS)
	rm -rf @DX_DOCDIR@
	$(DX_ENV) $(DX_DOXYGEN) $(DX_CONFIG)
	echo Timestamp >$@
DX_CLEANFILES = \
	@DX_DOCDIR@/@PACKAGE@.tag \
	-r \
	$(DX_CLEAN_HTML) \
	$(DX_CLEAN_CHM) \
	$(DX_CLEAN_CHI) \
	$(DX_CLEAN_MAN) \
	$(DX_CLEAN_RTF) \
	$(DX_CLEAN_XML) \
	$(DX_CLEAN_PS) \
	$(DX_CLEAN_PDF) \
	$(DX_CLEAN_LATEX)
endif DX_COND_doc


MOSTLYCLEANFILES = $(DX_CLEANFILES)


build-tests-local: all $(check_PROGRAMS)

rpm: dist-bzip2
	$(MAKE) -C scripts rpm

deb: dist-bzip2
	$(MAKE) -C scripts deb
